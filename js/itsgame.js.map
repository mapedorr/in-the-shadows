{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src/BasicGame.js",
    "src/classes/Days.js",
    "src/classes/Eye.js",
    "src/classes/Helper.js",
    "src/classes/Level.js",
    "src/classes/Light.js",
    "src/classes/Lightning.js",
    "src/classes/Player.js",
    "src/index.js",
    "src/states/Boot.js",
    "src/states/Game.js",
    "src/states/MainMenu.js",
    "src/states/Preloader.js",
    "src/states/TheEnd.js"
  ],
  "names": [],
  "mappings": "AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACtjwxnhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnpozg
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()",
    "var BasicGame = {\r\n  language: \"es\",\r\n  currentLevel: 1,\r\n  deaths: 0,\r\n  rest: 0,\r\n  setLanguage: function (newLanguage) {\r\n    this.language = newLanguage;\r\n    return this.getCode();\r\n  },\r\n  setDay: function (n) {\r\n    this.currentLevel = n;\r\n    return this.getCode();\r\n  },\r\n  addDeath: function () {\r\n    this.deaths++;\r\n    return this.getCode();\r\n  },\r\n  setRest: function () {\r\n    this.rest = 1;\r\n    return this.getCode();\r\n  },\r\n  getCode: function () {\r\n    var level = this.currentLevel;\r\n    return this.rest +\r\n      '' + this.deaths +\r\n      '' + ((level < 10) ? ('0' + level) : level) +\r\n      '' + this.language;\r\n  },\r\n  readCode: function (code) {\r\n    if (code.length < 4) return;\r\n\r\n    if (code.length > 4) {\r\n      this.language = code.slice(code.length - 2) || this.language;\r\n      code = code.slice(0, code.length - 2);\r\n    }\r\n\r\n    this.currentLevel = parseInt(code.slice(code.length - 2));\r\n    this.deaths = parseInt(code.slice(1, code.length - 2));\r\n    this.rest = parseInt(code.charAt(0));\r\n  },\r\n  getDeaths: function () {\r\n    return this.deaths;\r\n  },\r\n  reset: function () {\r\n    this.currentLevel = 1;\r\n    this.deaths = 0;\r\n    this.rest = 0;\r\n  },\r\n  changeHTMLBackground: function (color) {\r\n    document.body.style.backgroundColor = color;\r\n\r\n  }\r\n};\r\n\r\nmodule.exports = BasicGame;",
    "// levels for testing:\r\n// 4 (free space for testing jumps)\r\nvar BasicGame = require('BasicGame');\r\n\r\nBasicGame.Days = function () {\r\n  this.days = {\r\n    1: {\r\n      'number': 1095,\r\n      'text': {\r\n        'en': 'This will always be with me',\r\n        'es': 'Esto me acompañará siempre'\r\n      },\r\n      'waitTime': 3\r\n    },\r\n    2: {\r\n      'number': 998,\r\n      'text': {\r\n        'en': 'A couple of pills could help',\r\n        'es': 'Un par de píldoras pueden ayudar'\r\n      },\r\n      'waitTime': 4\r\n    },\r\n    3: {\r\n      'number': 912,\r\n      'text': {\r\n        'en': 'Sometimes I still remember it',\r\n        'es': 'Aún a veces lo recuerdo'\r\n      },\r\n      'waitTime': 3\r\n    },\r\n    4: {\r\n      'number': 839,\r\n      'text': {\r\n        'en': 'I no longer need so many pills',\r\n        'es': 'Ya no necesito tantas píldoras'\r\n      },\r\n      'waitTime': 3\r\n    },\r\n    5: {\r\n      'number': 766,\r\n      'text': {\r\n        'en': 'Everyone seems to have forgotten it',\r\n        'es': 'Todos parecen haberlo olvidado'\r\n      },\r\n      'waitTime': 4\r\n    },\r\n    6: {\r\n      'number': 730,\r\n      'text': {\r\n        'en': 'Someday I will tell someone',\r\n        'es': 'Algún día se lo contaré a alguien'\r\n      },\r\n      'waitTime': 4\r\n    },\r\n    7: {\r\n      'number': 657,\r\n      'text': {\r\n        'en': 'Noooo! I can\\'t be thinking about that again',\r\n        'es': '¡Noooo! No puedo estar pensando en eso'\r\n      },\r\n      'waitTime': 4\r\n    },\r\n    8: {\r\n      'number': 511,\r\n      'text': {\r\n        'en': 'Why am I thinking about that?',\r\n        'es': '¿Por qué estoy pensando en eso?'\r\n      },\r\n      'waitTime': 4\r\n    },\r\n    9: {\r\n      'number': 401,\r\n      'text': {\r\n        'en': 'I thought I had already passed it',\r\n        'es': 'Pensé que ya lo había superado'\r\n      },\r\n      'waitTime': 4\r\n    },\r\n    10: {\r\n      'number': 365,\r\n      'text': {\r\n        'en': 'I can\\'t believe that one year has passed',\r\n        'es': 'No puedo creer que ya haya pasado un año'\r\n      },\r\n      'waitTime': 5\r\n    },\r\n    11: {\r\n      'number': 313,\r\n      'text': {\r\n        'en': 'Soon, a year will have been passed',\r\n        'es': 'Dentro de poco habrá pasado un año'\r\n      },\r\n      'waitTime': 5\r\n    },\r\n    12: {\r\n      'number': 248,\r\n      'text': {\r\n        'en': 'His family seems happy now',\r\n        'es': 'Su familia parece feliz ahora'\r\n      },\r\n      'waitTime': 5\r\n    },\r\n    13: {\r\n      'number': 212,\r\n      'text': {\r\n        'en': 'Few remember him already',\r\n        'es': 'Pocos lo recuerdan ya'\r\n      },\r\n      'waitTime': 6\r\n    },\r\n    14: {\r\n      'number': 186,\r\n      'text': {\r\n        'en': 'He deserved it, I know',\r\n        'es': 'Se lo merecía, lo sé'\r\n      },\r\n      'waitTime': 5\r\n    },\r\n    15: {\r\n      'number': 171,\r\n      'text': {\r\n        'en': 'I\\'ve been thinking about that, I can\\'t concentrate',\r\n        'es': 'He estado pensando en eso, no puedo concentrarme'\r\n      },\r\n      'waitTime': 3\r\n    },\r\n    16: {\r\n      'number': 156,\r\n      'text': {\r\n        'en': 'I\\'ve to consume less pills',\r\n        'es': 'Tengo que consumir menos pastillas'\r\n      },\r\n      'waitTime': 5\r\n    },\r\n    17: {\r\n      'number': 101,\r\n      'text': {\r\n        'en': '...ughh ...ughhh ...it was just a nightmare...',\r\n        'es': '...ughh...ughhh...sólo fue una pesadilla...'\r\n      },\r\n      'waitTime': 4\r\n    },\r\n    18: {\r\n      'number': 90,\r\n      'text': {\r\n        'en': 'Almost 3 months have passed, I can\\'t believe it',\r\n        'es': 'Han pasado casi 3 meses, no puedo creerlo'\r\n      },\r\n      'waitTime': 4\r\n    },\r\n    19: {\r\n      'number': 74,\r\n      'text': {\r\n        'en': 'A band was blamed, they wont keep looking',\r\n        'es': 'Una banda fue culpada, no van a seguir buscando'\r\n      },\r\n      'waitTime': 4\r\n    },\r\n    20: {\r\n      'number': 35,\r\n      'text': {\r\n        'en': 'My mom already noticed about the pills',\r\n        'es': 'Mi mamá ya notó lo de las pastillas'\r\n      },\r\n      'waitTime': 3\r\n    },\r\n    21: {\r\n      'number': 9,\r\n      'text': {\r\n        'en': 'Today I found out they have clues...',\r\n        'es': 'Hoy supe que tienen pistas...'\r\n      },\r\n      'waitTime': 3\r\n    },\r\n    22: {\r\n      'number': 8,\r\n      'text': {\r\n        'en': 'The news said it was a robbery',\r\n        'es': 'En las noticias dijeron que fue un robo'\r\n      },\r\n      'waitTime': 4\r\n    },\r\n    23: {\r\n      'number': 7,\r\n      'text': {\r\n        'en': 'His family is suffering...',\r\n        'es': 'Su familia está sufriendo...'\r\n      },\r\n      'waitTime': 3\r\n    },\r\n    24: {\r\n      'number': 6,\r\n      'text': {\r\n        'en': 'I saw him on the street today. That can\\'t be!!!',\r\n        'es': 'Hoy me pareció verlo en la calle. ¡ESO NO PUEDE SER!'\r\n      },\r\n      'waitTime': 5\r\n    },\r\n    25: {\r\n      'number': 5,\r\n      'text': {\r\n        'en': 'I can\\'t take it anymore! I have to confess what I did',\r\n        'es': '¡No puedo más! Tengo que confesar lo que hice'\r\n      },\r\n      'waitTime': 4\r\n    },\r\n    26: {\r\n      'number': 4,\r\n      'text': {\r\n        'en': 'Bill was a damn drunk good for nothing! I had to do it',\r\n        'es': '¡Ernesto era un maldito borracho bueno para nada! Tenía que hacerlo'\r\n      },\r\n      'waitTime': 6\r\n    },\r\n    27: {\r\n      'number': 3,\r\n      'text': {\r\n        'en': 'The police have been asking questions, WHAT AM I GOING TO DO!!!???',\r\n        'es': 'La policía ha estado preguntando cosas, ¿¡QUÉ VOY A HACER!?'\r\n      },\r\n      'waitTime': 6\r\n    },\r\n    28: {\r\n      'number': 2,\r\n      'text': {\r\n        'en': 'Reassure yourself, you know he deserved it',\r\n        'es': 'Tranquila, sabes que él lo merecía'\r\n      },\r\n      'waitTime': 7\r\n    },\r\n    29: {\r\n      'number': 1,\r\n      'text': {\r\n        'en': 'I have to...confess...I...I have to...',\r\n        'es': 'Tengo que...confesar...te...tengo que...'\r\n      },\r\n      'waitTime': 3\r\n    },\r\n    30: {\r\n      'number': 0,\r\n      'text': {\r\n        'en': 'What have I done? WHAT HAVE I DONE!!!???',\r\n        'es': '¿Qué he hecho? ¿¡QUÉ HE HECHOOO!?'\r\n      },\r\n      'waitTime': 3\r\n    }\r\n  };\r\n};\r\n\r\nBasicGame.Days.prototype.getDay = function (dayIndex) {\r\n  if (!this.days[dayIndex]) return { 'number': '???' };\r\n  return this.days[dayIndex];\r\n};",
    "var BasicGame = require('BasicGame');\r\n\r\n/**\r\nThe MIT License (MIT)\r\nCopyright (c) <year> <copyright holders>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\n/**\r\n * Method that set the default values for the properties of the Eye object.\r\n * \r\n * @param {Object} game    The Object of Phaser game\r\n * @param {Object} gameObj The Object of BasicGame.Game\r\n */\r\nBasicGame.Eye = function (game, gameObj) {\r\n  // constants\r\n  this.ZONE_SIZE = game.world.width / 3;\r\n  // X radius >> horizontal half-size of the eyelid fill\r\n  this.LATERAL_CANTHUS_DISTANCE = (191 / 2) * 0.9;\r\n  // Y radius >> vertical half-size of the eyelid fill\r\n  this.LOWER_EYELID_DISTANCE = (96 / 2) * 0.9;\r\n  this.RESTART_SEARCH_DELAY = 1200;\r\n  // (!) define the patterns for the EYE\r\n  // each pattern is formed by a series of steps, each steps defines:\r\n  // a start position (sp), an end position (ep) and a movement time (mt)\r\n  //   [\r\n  //     p1[step1[sp, ep, mt], step2[sp, ep, mt]...stepX[sp, ep, mt]],\r\n  //     p2[step1[sp, ep, mt], step2[sp, ep, mt]...stepX[sp, ep, mt]],\r\n  //     ...\r\n  //     pY[step1[sp, ep, mt], step2[sp, ep, mt]...stepX[sp, ep, mt]],\r\n  //   ]\r\n  this.PATTERNS = [\r\n    [[0, 3, 1], [3, 6, 2], [6, 0, 1]], // this will be always the first pattern\r\n    [[0, 1, 0.5], [1, 4, 1], [4, 2, 1], [2, 5, 2], [5, 0, 1]],\r\n    [[0, 3, 0.5], [3, 6, 0.6], [6, 0, 0.5]],\r\n    [[0, 4, 0.5], [4, 1, 1], [1, 5, 1], [5, 2, 2], [2, 0, 1]]\r\n  ];\r\n  this.FIRST_PATTERN_INDEX = 0;\r\n\r\n  // destroyable objects\r\n  this.eye = null;\r\n  this.viewZone = null;\r\n  this.pupil = null;\r\n  this.pupilMask = null;\r\n  this.bitmap = null;\r\n  this.laughSound = null;\r\n  this.angerSound = null;\r\n  this.viewZoneMovementTween = null;\r\n  this.pupilMovementTween = null;\r\n  this.invisibleZoneImage = null;\r\n  this.invisibleZoneMask = null;\r\n\r\n  // global properties\r\n  this.game = game;\r\n  this.gameObj = gameObj;\r\n  this.anger = null;\r\n  this.shooting = null;\r\n  this.searching = null;\r\n  this.levelEnded = null;\r\n  this.currentPatternId = -1;\r\n  this.usedPatterns = 0;\r\n  this.movementTime = null;\r\n  this.xDistanceMax = null;\r\n  this.eyeCenterYOffset = null;\r\n  this.currentPatternCompleted = true;\r\n\r\n  // things I can take from this.game ═╗\r\n  this.playerObj = null;\r\n  this.level = null;\r\n  this.lightning = null;\r\n  // ╚═════════════════════════════════╝\r\n};\r\n\r\n// ╔══════════════════════════════════════════════════════════════════════════╗\r\n// ║ PHASER STATE METHODS                                                     ║\r\nBasicGame.Eye.prototype.create = function (playerObj, level, lightning) {\r\n  // set the default values for some properties\r\n  this.playerObj = playerObj;\r\n  this.level = level;\r\n  this.lightning = lightning;\r\n\r\n  // add the sprite of the eye\r\n  this.eye = this.game.add.sprite(this.game.world.width / 2, 84, 'eye', 0);\r\n  this.eye.originalX = this.eye.x;\r\n  this.eye.originalY = this.eye.y;\r\n  this.eye.anchor.setTo(0.5, 0.5);\r\n  this.eye.frame = 3;\r\n\r\n  // add the  sprite of the pupil\r\n  this.pupil = this.game.add.image(this.eye.x, this.eye.y + 25, 'pupil');\r\n  this.pupil.anchor.setTo(0.5, 0.5);\r\n  this.pupil.alpha = 0;\r\n\r\n  // create the mask for the pupil\r\n  this.pupilMask = this.game.add.graphics(this.eye.x - 95.77, this.eye.y);\r\n  this.pupilMask.beginFill(0xff0000);\r\n  this.pupilMask.bezierCurveTo(0, 1, 90, 111, 193, 0);\r\n  this.pupilMask.bezierCurveTo(193, 0, 110, -106, 0, -1);\r\n  this.pupil.mask = this.pupilMask;\r\n\r\n  // create the array of key positions for the pupil (this will be linked to\r\n  // the position of the view zone)\r\n  this.pupilImagePositions = {\r\n    '3': this.eye.centerX - this.LATERAL_CANTHUS_DISTANCE / 1.4,\r\n    '2': this.eye.centerX - this.LATERAL_CANTHUS_DISTANCE / 2.4,\r\n    '1': this.eye.centerX - this.LATERAL_CANTHUS_DISTANCE / 4.4,\r\n    '0': this.eye.centerX,\r\n    '4': this.eye.centerX + this.LATERAL_CANTHUS_DISTANCE / 4.4,\r\n    '5': this.eye.centerX + this.LATERAL_CANTHUS_DISTANCE / 2.4,\r\n    '6': this.eye.centerX + this.LATERAL_CANTHUS_DISTANCE / 1.4\r\n  };\r\n\r\n  this.invisibleZoneMask = this.game.add.graphics(0, 0);\r\n  this.invisibleZoneMask.beginFill(0xffffff);\r\n  this.invisibleZoneMask.drawRect(-this.ZONE_SIZE, 0, this.ZONE_SIZE * 2, this.game.world.height);\r\n  this.invisibleZoneMask.drawRect(this.ZONE_SIZE * 2, 0, this.ZONE_SIZE * 2, this.game.world.height);\r\n  this.invisibleZoneMask.endFill();\r\n\r\n  this.invisibleZoneImage = this.game.add.image(-this.game.world.width, 0, 'credits_background');\r\n  this.invisibleZoneImage.width = this.game.world.width * 3;\r\n  this.invisibleZoneImage.height = this.game.world.height;\r\n  this.invisibleZoneImage.alpha = .3;\r\n  this.invisibleZoneImage.mask = this.invisibleZoneMask;\r\n  this.invisibleZoneImage.alpha = 0;\r\n\r\n  // create the view zones\r\n  this.viewZone = this.game.add.image(this.eye.position.x - this.ZONE_SIZE / 2, 0, 'view_zone');\r\n  this.viewZone.alpha = 0;\r\n\r\n  // calculate and store the key positions of the view zone\r\n  var zoneDiv = this.ZONE_SIZE / 3;\r\n  this.viewZone.positions = {\r\n    '3': 0,\r\n    '2': zoneDiv,\r\n    '1': zoneDiv * 2,\r\n    '0': this.viewZone.position.x,\r\n    '4': this.viewZone.position.x + zoneDiv,\r\n    '5': this.viewZone.position.x + zoneDiv * 2,\r\n    '6': this.game.world.width - this.ZONE_SIZE\r\n  };\r\n\r\n  // create a bitmap texture for drawing lines\r\n  if (BasicGame.Game.developmentMode === true) { // [ development mode ]\r\n    this.bitmap = this.game.add.bitmapData(this.game.width, this.game.height);\r\n    this.bitmap.context.fillStyle = 'rgb(255, 255, 255)';\r\n    this.bitmap.context.strokeStyle = 'rgb(255, 255, 255)';\r\n    this.game.add.image(0, 0, this.bitmap);\r\n  }\r\n\r\n  // create the lightning for killing the player\r\n  this.lightning.create(this.eye, this.playerObj, this.level);\r\n  this.lightningTimer = 0;\r\n\r\n  // ---------------------------------------------------------------------------\r\n  // setup the sounds\r\n  if (!this.laughSound) {\r\n    this.laughSound = this.game.add.sound('eye', 0.1);\r\n  }\r\n\r\n  if (!this.angerSound) {\r\n    this.angerSound = this.game.add.sound('eye-anger', 0.8);\r\n  }\r\n\r\n  // ---------------------------------------------------------------------------\r\n  // set global properties\r\n  this.shooting = false;\r\n  this.searching = false;\r\n  this.levelEnded = false;\r\n  this.usedPatterns = 0;\r\n  this.anger = false;\r\n  this.xDistanceMax = Math.abs((this.pupilImagePositions['6']) - this.eye.centerX);\r\n  this.eyeCenterYOffset = this.eye.centerY - 40;\r\n};\r\n\r\nBasicGame.Eye.prototype.update = function () {\r\n  var checkLeft = false;\r\n  var checkRight = false;\r\n  var canSeePlayer = false;\r\n\r\n  this.gameObj.light.lightGroup.children[0].x = this.pupil.x;\r\n  this.gameObj.light.lightGroup.children[0].y = this.pupil.y;\r\n  this.invisibleZoneMask.centerX = this.viewZone.centerX + this.ZONE_SIZE;\r\n\r\n  if (BasicGame.Game.developmentMode === true) { // [ development mode ]\r\n    // clear the bitmap where we are drawing our lines\r\n    this.bitmap.context.clearRect(0, 0, this.game.width, this.game.height);\r\n  }\r\n\r\n  if (this.levelEnded === true) {\r\n    // the player is dead\r\n    return;\r\n  }\r\n\r\n  if (this.gameObj.isLoadingLevel === true) {\r\n    this.eye.frame = 0;\r\n    this.pupil.x = this.pupilImagePositions['0'];\r\n    return;\r\n  }\r\n\r\n  // ---------------------------------------------------------------------------\r\n  // ray casting\r\n\r\n  // test if the target can see the eye by casting a ray (a line) towards the eye.\r\n  // if the ray intersects any walls before it intersects the eye then the wall\r\n  // is in the way.\r\n  canSeePlayer = this.isPlayerInsideViewZone();\r\n\r\n  if (BasicGame.Game.developmentMode === true) { // [ development mode ]\r\n    if (canSeePlayer === true) {\r\n      this.playerObj.playerSprite.tint = 0x990000;\r\n    }\r\n    else {\r\n      this.playerObj.playerSprite.tint = 0xFFFFFF;\r\n    }\r\n  }\r\n\r\n  // check if the player is in the side of vision of the EYE\r\n  if (this.searching === true && canSeePlayer === true) {\r\n    // check which of the points in the player should be used for \"in shadow\"\r\n    // evaluation\r\n    if (this.playerObj.playerSprite.left > this.viewZone.left) {\r\n      checkLeft = true;\r\n    }\r\n\r\n    if (this.playerObj.playerSprite.right < this.viewZone.right) {\r\n      checkRight = true;\r\n    }\r\n\r\n    if (this.playerObj.isInShadow(checkLeft, checkRight) === false) {\r\n      if (BasicGame.Game.developmentMode === true) { // [ development mode ]\r\n        // red, of dead\r\n        this.playerObj.playerSprite.tint = 0xFF0000;\r\n      }\r\n\r\n      // shoot to the player\r\n      if (this.shooting === false) {\r\n        this.shootPlayer(this.playerObj.playerSprite);\r\n      }\r\n    }\r\n    else {\r\n      if (BasicGame.Game.developmentMode === true) { // [ development mode ]\r\n        // blue, of nor dead\r\n        this.playerObj.playerSprite.tint = 0x00FFFF;\r\n      }\r\n    }\r\n  }\r\n\r\n  // This just tells the engine it should update the texture cache\r\n  if (BasicGame.Game.developmentMode === true) { // [ development mode ]\r\n    this.bitmap.dirty = true;\r\n  }\r\n};\r\n\r\nBasicGame.Eye.prototype.shutdown = function () {\r\n  this.viewZone.destroy();\r\n  this.invisibleZoneImage.destroy();\r\n  this.invisibleZoneMask.destroy();\r\n  this.pupil.destroy();\r\n  this.pupilMask.destroy();\r\n  this.eye.destroy();\r\n  if (this.bitmap) {\r\n    this.bitmap.destroy();\r\n  }\r\n  this.stopEyeTweens();\r\n  this.laughSound.destroy();\r\n  this.angerSound.destroy();\r\n};\r\n// ║                                                                           ║\r\n// ╚═══════════════════════════════════════════════════════════════════════════╝\r\n\r\n/**\r\n * Method that checks if the player is inside the view zone of the EYE.\r\n */\r\nBasicGame.Eye.prototype.isPlayerInsideViewZone = function () {\r\n  if (this.viewZone.alpha > 0 &&\r\n    this.playerObj.playerSprite.centerX > 0 &&\r\n    this.playerObj.playerSprite.centerX < this.game.world.width &&\r\n    this.playerObj.playerSprite.centerY > 0 &&\r\n    this.playerObj.playerSprite.centerY < this.game.world.height) {\r\n    if ((this.playerObj.playerSprite.right >= this.viewZone.left + this.playerObj.playerSprite.width) &&\r\n      this.playerObj.playerSprite.right < this.viewZone.right) {\r\n      return true;\r\n    }\r\n\r\n    if (this.playerObj.playerSprite.left > this.viewZone.left &&\r\n      (this.playerObj.playerSprite.left <= this.viewZone.right - this.playerObj.playerSprite.width)) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Method that define the pattern for seeking the player, setup and plays the\r\n * tweens for both the pupil and the view zone.\r\n * \r\n * @param  {boolean} delay Defines if the seeking should be wait a while before\r\n *                         starting\r\n */\r\nBasicGame.Eye.prototype.initSearch = function (delay) {\r\n  if (this.levelEnded === true) {\r\n    return;\r\n  }\r\n\r\n  // check if it is necessary to wait before starting the search\r\n  if (delay) {\r\n    this.gameObj.helper.timer(delay,\r\n      function () {\r\n        this.initSearch();\r\n      },\r\n      this);\r\n    return;\r\n  }\r\n\r\n  // play the search animation in the EYE's sprite\r\n  this.eye.frame = 0;\r\n\r\n  // set the flag that indicates if the EYE is seeking for the player\r\n  this.searching = true;\r\n  this.shooting = false;\r\n\r\n  // pick a pattern to start the search\r\n  if (this.currentPatternCompleted === true) {\r\n    this.setPattern();\r\n  }\r\n  else {\r\n    this.viewZone.alpha = 1;\r\n    this.pupil.alpha = 1;\r\n    this.invisibleZoneImage.alpha = .5;\r\n\r\n    this.nextStepInPattern(100);\r\n  }\r\n\r\n};\r\n\r\nBasicGame.Eye.prototype.stopSearch = function () {\r\n  this.viewZoneMovementTween.stop();\r\n  this.pupilMovementTween.stop();\r\n  this.searching = false;\r\n};\r\n\r\nBasicGame.Eye.prototype.setPattern = function () {\r\n  var intent = 0;\r\n  var newPatternIndex = 0;\r\n\r\n  // set the defaults for the pupil and the view zone\r\n  this.viewZone.x = this.viewZone.positions['0'];\r\n  this.viewZone.alpha = 1;\r\n  this.pupil.x = this.pupilImagePositions['0'];\r\n  this.pupil.alpha = 1;\r\n  this.invisibleZoneImage.alpha = .5;\r\n\r\n  this.lap = 0;\r\n  this.currentPatternCompleted = false;\r\n\r\n  // define if the pattern will be used reversed\r\n  this.patternReversed = Math.random() > 0.5 ? true : false;\r\n\r\n  if (this.usedPatterns === 0) {\r\n    this.currentPatternIdIndex = this.FIRST_PATTERN_INDEX;\r\n    this.currentPatternId = this.currentPatternIdIndex;\r\n\r\n    // at level start, init the search in the opposite direction of player's spawn\r\n    // position (player on left then this.patternReversed equals true)\r\n    this.patternReversed = this.gameObj.player.playerSprite.centerX <= this.eye.centerX;\r\n  }\r\n  else if (this.usedPatterns === 1) {\r\n    this.currentPatternIdIndex = this.gameObj.helper.randomNumber(0, this.PATTERNS.length);\r\n    this.currentPatternId = this.currentPatternIdIndex;\r\n  }\r\n  else {\r\n    // pick the next pattern\r\n    if (++this.currentPatternIdIndex >= this.PATTERNS.length) {\r\n      this.currentPatternIdIndex = 0;\r\n    }\r\n\r\n    this.currentPatternId = this.currentPatternIdIndex;\r\n  }\r\n  this.usedPatterns++;\r\n\r\n  this.pattern = this.PATTERNS[this.currentPatternId];\r\n\r\n  // get the index of the initial step of the pattern\r\n  this.currentPatternStep = !this.patternReversed ? 0 : this.pattern.length - 1;\r\n  this.iteratePattern();\r\n};\r\n\r\nBasicGame.Eye.prototype.iteratePattern = function () {\r\n  var initPosition = -1;\r\n  var targetPosition = -1;\r\n  var currentPattern = this.pattern[this.currentPatternStep];\r\n\r\n  // iterate over the steps of the pattern and make the EYE move to each\r\n  // position of it\r\n  if ((!this.patternReversed && this.currentPatternStep < this.pattern.length) ||\r\n    (this.patternReversed && this.currentPatternStep >= 0)) {\r\n    if (!this.patternReversed) {\r\n      initPosition = currentPattern[0];\r\n      targetPosition = currentPattern[1];\r\n    }\r\n    else {\r\n      initPosition = currentPattern[1];\r\n      targetPosition = currentPattern[0];\r\n    }\r\n\r\n    // set the initial X position of the EYE and the view zone\r\n    this.viewZone.x = this.viewZone.positions[initPosition];\r\n    this.pupil.x = this.pupilImagePositions[initPosition];\r\n    this.movementTime = currentPattern[2] * 1000;\r\n\r\n    this.runPupilViewZoneTweens(targetPosition);\r\n  }\r\n  else {\r\n    // if there are no more steps in the pattern\r\n    if (++this.lap < 2) {\r\n      this.gameObj.helper.timer(1000,\r\n        function () {\r\n          this.currentPatternStep = !this.patternReversed ? 0 : this.pattern.length - 1;\r\n          this.iteratePattern();\r\n        },\r\n        this);\r\n    }\r\n    else {\r\n      this.currentPatternCompleted = true;\r\n      // if the pattern was used twice, change it\r\n      if (this.shooting === true) {\r\n        // this is triggered when the player enters the view zone while the\r\n        // eye is looking to the front before getting tired\r\n        return;\r\n      }\r\n\r\n      if (this.viewZoneMovementTween &&\r\n        this.viewZoneMovementTween.isRunning) {\r\n      }\r\n\r\n      this.searching = false;\r\n      this.getTired();\r\n    }\r\n  }\r\n};\r\n\r\nBasicGame.Eye.prototype.runPupilViewZoneTweens = function (targetPosition) {\r\n  // move the view zone and the pupil\r\n  if (this.viewZoneMovementTween && this.viewZoneMovementTween.isRunning) {\r\n    return;\r\n  }\r\n\r\n  this.pupilMovementTween = this.game.add.tween(this.pupil);\r\n  this.pupilMovementTween.to({\r\n    x: this.pupilImagePositions[targetPosition]\r\n  }, this.movementTime);\r\n  this.pupilMovementTween.onUpdateCallback(function () {\r\n    var dx = Math.abs(this.pupil.x - this.eye.centerX);\r\n    var xDiffPercentage = 1 - dx / this.xDistanceMax;\r\n    var dy = (this.eye.centerY + (this.LOWER_EYELID_DISTANCE * xDiffPercentage)) - this.eyeCenterYOffset;\r\n    var c = Math.sqrt((dx * dx) + (dy * dy));\r\n    var alfa = Math.asin(dy / c);\r\n    this.pupil.y = (Math.sin(alfa) * this.LOWER_EYELID_DISTANCE) + this.eye.centerY;\r\n  }, this);\r\n  this.pupilMovementTween.start();\r\n\r\n  this.viewZoneMovementTween = this.game.add.tween(this.viewZone);\r\n  this.viewZoneMovementTween.to({\r\n    x: this.viewZone.positions[targetPosition]\r\n  }, this.movementTime);\r\n  this.viewZoneMovementTween.onComplete.addOnce(function () {\r\n    if (this.shooting === false) {\r\n      this.nextStepInPattern();\r\n\r\n      this.viewZoneMovementTween = null;\r\n      this.pupilMovementTween = null;\r\n    }\r\n  }, this);\r\n  this.viewZoneMovementTween.start();\r\n};\r\n\r\nBasicGame.Eye.prototype.nextStepInPattern = function (delay) {\r\n  // wait a second before changing to a new pattern\r\n  this.gameObj.helper.timer(delay || 1000, function () {\r\n    if (this.levelEnded === true || this.shooting === true) {\r\n      return;\r\n    }\r\n\r\n    if (!this.patternReversed) {\r\n      ++this.currentPatternStep;\r\n    }\r\n    else {\r\n      --this.currentPatternStep;\r\n    }\r\n\r\n    this.iteratePattern();\r\n  }, this);\r\n};\r\n\r\nBasicGame.Eye.prototype.shootPlayer = function (target) {\r\n  var tweensInPause = false;\r\n\r\n\r\n  this.shooting = true;\r\n  this.searching = false;\r\n  this.eye.frame = 2; // angry eye\r\n  this.lightning.shoot(target);\r\n\r\n  // hide the pupil while shooting\r\n  this.pupil.alpha = 0;\r\n  this.viewZone.alpha = 0;\r\n  this.invisibleZoneImage.alpha = 0;\r\n\r\n  // pause the current tweens, if any, for the pupil and the viewzone\r\n  if (this.viewZoneMovementTween && this.viewZoneMovementTween.isRunning === true) {\r\n    this.viewZoneMovementTween.pause();\r\n    this.pupilMovementTween.pause();\r\n\r\n    tweensInPause = true;\r\n  }\r\n\r\n  this.destroyTimers(this.getTiredTimer, this.getMadTimer, this.searchAgain);\r\n\r\n  // init the timer that will make the EYE calm down again and restart the\r\n  // search\r\n  this.calmDownTimer = this.game.time.create(true);\r\n  this.calmDownTimer.add(3000,\r\n    function () {\r\n      if (tweensInPause === true) {\r\n        this.eye.frame = 0;\r\n\r\n        this.pupil.alpha = 1;\r\n        this.viewZone.alpha = 1;\r\n        this.invisibleZoneImage.alpha = .5;\r\n\r\n        this.searching = true;\r\n        this.shooting = false;\r\n\r\n        if (this.viewZoneMovementTween && this.pupilMovementTween) {\r\n          this.viewZoneMovementTween.resume();\r\n          this.pupilMovementTween.resume();\r\n        }\r\n      }\r\n      else {\r\n\r\n        if (this.viewZoneMovementTween) {\r\n          this.viewZoneMovementTween.stop();\r\n          this.pupilMovementTween.stop();\r\n        }\r\n\r\n        this.initSearch();\r\n      }\r\n    },\r\n    this);\r\n  this.calmDownTimer.start();\r\n};\r\n\r\nBasicGame.Eye.prototype.levelStart = function (levelRestarted) {\r\n  this.levelEnded = false;\r\n  this.shooting = false;\r\n  this.usedPatterns = 0;\r\n  this.currentPatternCompleted = true;\r\n  this.destroyTimers();\r\n  this.stopEyeTweens();\r\n\r\n  if (levelRestarted === true) {\r\n    this.initSearch();\r\n  }\r\n};\r\n\r\nBasicGame.Eye.prototype.levelEndedEvent = function (levelCompleted) {\r\n  this.levelEnded = true;\r\n  this.searching = false;\r\n  this.shooting = false;\r\n  this.usedPatterns = 0\r\n  this.currentPatternCompleted = true;\r\n  this.currentPattern = null;\r\n  this.currentPatternId = null;\r\n  this.currentPatternIdIndex = -1;\r\n  this.currentPatternStep = 0;\r\n\r\n  this.destroyTimers();\r\n  this.stopEyeTweens();\r\n};\r\n\r\nBasicGame.Eye.prototype.gameInDarkness = function () {\r\n  this.eye.frame = 3;\r\n  this.viewZone.x = this.viewZone.positions['0'];\r\n  this.viewZone.alpha = 0;\r\n  this.pupil.x = this.pupilImagePositions['0'];\r\n  this.pupil.alpha = 0;\r\n  this.invisibleZoneImage.alpha = 0;\r\n\r\n  this.destroyTimers();\r\n  this.stopEyeTweens();\r\n\r\n  this.levelEnded = true;\r\n};\r\n\r\nBasicGame.Eye.prototype.destroyTimers = function () {\r\n  if (arguments.length === 0) {\r\n    if (this.calmDownTimer) {\r\n      this.calmDownTimer.destroy();\r\n    }\r\n\r\n    if (this.getTiredTimer) {\r\n      this.getTiredTimer.destroy();\r\n    }\r\n\r\n    if (this.getMadTimer) {\r\n      this.getMadTimer.destroy();\r\n    }\r\n\r\n    if (this.searchAgain) {\r\n      this.searchAgain.destroy();\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  for (var i = arguments.length - 1; i >= 0; i--) {\r\n    if (arguments[i]) arguments[i].destroy();\r\n  }\r\n};\r\n\r\nBasicGame.Eye.prototype.rejoice = function (callback) {\r\n  var shakeTween;\r\n\r\n  this.destroyTimers();\r\n  this.viewZone.alpha = 0;\r\n  this.invisibleZoneImage.alpha = 0;\r\n\r\n  shakeTween = this.game.add.tween(this.eye);\r\n  shakeTween.to({ y: this.eye.originalY + 10 }, 150, null, false, 0, 4, true);\r\n  shakeTween.onComplete.add(function () {\r\n    this.eye.y = this.eye.originalY;\r\n    this.laughSound.stop();\r\n    callback();\r\n  }, this);\r\n  shakeTween.start();\r\n\r\n  this.laughSound.play();\r\n};\r\n\r\n/**\r\n * Method that plays the 'tired' animation and makes the EYE get mad.\r\n */\r\nBasicGame.Eye.prototype.getTired = function () {\r\n  this.eye.frame = 1;\r\n\r\n  this.pupil.alpha = 0;\r\n  this.viewZone.alpha = 0;\r\n  this.invisibleZoneImage.alpha = 0;\r\n\r\n  if (this.levelEnded === true) {\r\n    return;\r\n  }\r\n\r\n  this.getMadTimer = this.game.time.create(true);\r\n  this.getMadTimer.add(1200,\r\n    function () {\r\n      if (this.levelEnded === true) {\r\n        return;\r\n      }\r\n\r\n      this.getMad();\r\n    },\r\n    this);\r\n  this.getMadTimer.start();\r\n};\r\n\r\n/**\r\n * Method that play the 'angry' animation of the EYE, shakes the camera and\r\n * restarts the seeking for the player.\r\n */\r\nBasicGame.Eye.prototype.getMad = function () {\r\n  this.madTween = this.game.add.tween(this.eye);\r\n\r\n  // play the angry animation and the sound linked to it\r\n  this.eye.frame = 2;\r\n  this.angerSound.play();\r\n\r\n  // shake the world\r\n  this.madTween.to({ x: this.eye.originalX + 10 },\r\n    40,\r\n    Phaser.Easing.Sinusoidal.InOut,\r\n    false,\r\n    0,\r\n    4,\r\n    true);\r\n  this.madTween.onComplete.addOnce(function () {\r\n    // restart the search after a while\r\n    this.searchAgain = this.game.time.create(true);\r\n    this.searchAgain.add(this.RESTART_SEARCH_DELAY,\r\n      function () {\r\n        if (this.levelEnded === true) {\r\n          return;\r\n        }\r\n\r\n        this.initSearch();\r\n      },\r\n      this);\r\n    this.searchAgain.start();\r\n  }, this);\r\n  this.madTween.start();\r\n\r\n};\r\n\r\nBasicGame.Eye.prototype.updateLevel = function (level) {\r\n  this.level = level;\r\n  this.anger = false;\r\n  this.usedPatterns = 0;\r\n\r\n  this.stopEyeTweens(true);\r\n};\r\n\r\nBasicGame.Eye.prototype.restartLevel = function () {\r\n  this.anger = false;\r\n  this.levelEnded = true;\r\n\r\n  this.destroyTimers();\r\n  this.stopEyeTweens();\r\n};\r\n\r\nBasicGame.Eye.prototype.stopEyeTweens = function (resetPosition) {\r\n  if (this.viewZoneMovementTween && this.pupilMovementTween) {\r\n    this.viewZoneMovementTween.onComplete.removeAll();\r\n    this.pupilMovementTween.onComplete.removeAll();\r\n    this.viewZoneMovementTween.stop();\r\n    this.pupilMovementTween.stop();\r\n  }\r\n\r\n  if (this.madTween && this.madTween.isRunning) {\r\n    this.madTween.onComplete.removeAll();\r\n    this.madTween.stop();\r\n    this.eye.x = this.eye.originalX;\r\n  }\r\n\r\n  if (resetPosition === true) {\r\n    this.viewZone.x = this.viewZone.positions['0'];\r\n    this.pupil.x = this.pupilImagePositions['0'];\r\n  }\r\n\r\n  this.viewZone.alpha = 0;\r\n  this.invisibleZoneImage.alpha = 0;\r\n  this.pupil.alpha = 0;\r\n};\r\n\r\nBasicGame.Eye.prototype.drawLinesToTarget = function (target) {\r\n  // draw a line from the eye to the target\r\n  this.bitmap.context.beginPath();\r\n  this.bitmap.context.moveTo(target.x, target.y);\r\n  this.bitmap.context.lineTo(this.eye.x, this.eye.y);\r\n  this.bitmap.context.stroke();\r\n\r\n  this.bitmap.context.beginPath();\r\n  this.bitmap.context.moveTo(target.x + target.width, target.y);\r\n  this.bitmap.context.lineTo(this.eye.x, this.eye.y);\r\n  this.bitmap.context.stroke();\r\n\r\n  this.bitmap.context.beginPath();\r\n  this.bitmap.context.moveTo(target.x, target.y + target.height);\r\n  this.bitmap.context.lineTo(this.eye.x, this.eye.y);\r\n  this.bitmap.context.stroke();\r\n\r\n  this.bitmap.context.beginPath();\r\n  this.bitmap.context.moveTo(target.x + target.width, target.y + target.height);\r\n  this.bitmap.context.lineTo(this.eye.x, this.eye.y);\r\n  this.bitmap.context.stroke();\r\n};",
    "var BasicGame = require('BasicGame');\r\n\r\n/**\r\n * Method that set the default values for the properties of the Helper object.\r\n * \r\n * @param {Object} game    The Object of Phaser game\r\n * @param {Object} gameObj The Object of BasicGame.Game\r\n */\r\nBasicGame.Helper = function (game, gameObj) {\r\n  this.game = game;\r\n  this.gameObj = gameObj;\r\n};\r\n\r\nBasicGame.Helper.prototype.timer = function (delay, callback, context) {\r\n  this.game.time.create(this.game, true)\r\n    .add(delay, callback, context || this)\r\n    .timer.start(100);\r\n};\r\n\r\nBasicGame.Helper.prototype.randomColor = function () {\r\n  var letters = '0123456789ABCDEF';\r\n  var color = '0x';\r\n  for (var i = 0; i < 6; i++) {\r\n    color += letters[Math.floor(Math.random() * 16)];\r\n  }\r\n  return color;\r\n};\r\n\r\nBasicGame.Helper.prototype.randomNumber = function (max, min) {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n};\r\n\r\nBasicGame.Helper.prototype.getLevelIdAndName = function (levelNumber) {\r\n  var postfix = (levelNumber < 10) ? '0' : '';\r\n  return {\r\n    id: 'lvl' + postfix + levelNumber,\r\n    name: 'level' + postfix + levelNumber\r\n  };\r\n};\r\n\r\nBasicGame.Helper.prototype.getSkyName = function (levelNumber) {\r\n  if (levelNumber <= 10) {\r\n    return 'sky01';\r\n  } else if (levelNumber <= 20) {\r\n    return 'sky02';\r\n  } else {\r\n    return 'sky03';\r\n  }\r\n};\r\n\r\nBasicGame.Helper.prototype.getSkyColor = function (levelNumber) {\r\n  if (!levelNumber) {\r\n    return '#F2F2F0';\r\n  }\r\n\r\n  if (levelNumber <= 10) {\r\n    return '#2B3825';\r\n  } else if (levelNumber <= 20) {\r\n    return '#33393D';\r\n  } else {\r\n    return '#4E1B1B';\r\n  }\r\n};",
    "var BasicGame = require('BasicGame');\r\n\r\n/**\r\nThe MIT License (MIT)\r\nCopyright (c) <year> <copyright holders>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\n\r\nBasicGame.Level = function (game, gameObj) {\r\n  // destroyable objects\r\n  this.levelTextGroup = null;\r\n  this.dayNumberText = null;\r\n  this.spikeSound = null;\r\n  this.map = null;\r\n  this.ground = null;\r\n  this.walls = null;\r\n  this.spikes = null;\r\n  this.pieces = null;\r\n  this.spikeSound = null;\r\n\r\n  // global properties\r\n  this.game = game;\r\n  this.gameObj = gameObj;\r\n  this.endTimer = null;\r\n  this.initPlayerPos = { x: 0, y: 0 };\r\n  this.daysShown = false;\r\n  this.isShowingDays = false;\r\n  this.dayText = {\r\n    \"es\": \"Día\",\r\n    \"en\": \"Day\"\r\n  };\r\n\r\n  // font attributes\r\n  this.fontId = 'font-medium';\r\n  this.hasFloor = false;\r\n  this.hasSpikes = false;\r\n};\r\n\r\nBasicGame.Level.prototype.create = function () {\r\n  // create the background for the day\r\n  this.levelTextGroup = this.game.add.group();\r\n\r\n  // create the bitmap for the day number\r\n  this.dayNumberText = this.game.add.bitmapText(this.game.world.width / 2,\r\n    this.game.world.height / 2 - 15,\r\n    this.fontId,\r\n    '',\r\n    72,\r\n    this.levelTextGroup);\r\n  this.dayNumberText.anchor.set(0.5, 0.5);\r\n  this.dayNumberText.align = \"center\";\r\n  this.dayNumberText.tint = 0x8d8d8e;\r\n  this.dayNumberText.oriY = this.dayNumberText.y;\r\n\r\n  if (!this.spikeSound) {\r\n    this.spikeSound = this.game.add.sound('spike', 0.2);\r\n  }\r\n\r\n  this.createLevel(parseInt(BasicGame.currentLevel));\r\n};\r\n\r\nBasicGame.Level.prototype.createLevel = function (num) {\r\n  var _self = this;\r\n  this.map = this.game.add.tilemap('lvl' + ((num < 10) ? '0' + num : num));\r\n\r\n  // create the floor of the level\r\n  this.hasFloor = false;\r\n  if (this.map.objects.floor) {\r\n    this.hasFloor = true;\r\n    this.ground = this.game.add.group();\r\n\r\n    this.map.createFromObjects(\"floor\", \"\", 'platform', 0, true, false,\r\n      this.ground, Phaser.Sprite, false);\r\n\r\n    this.ground.enableBody = true;\r\n    this.game.physics.arcade.enable(this.ground);\r\n    this.ground.forEach(function (groundSprite) {\r\n      groundSprite.body.immovable = true;\r\n      groundSprite.body.allowGravity = false;\r\n    });\r\n  }\r\n\r\n  // create the walls of the level\r\n  this.walls = this.game.add.group();\r\n  this.map.createFromObjects(\"platforms\", \"\", 'platform', 0, true, false,\r\n    this.walls, Phaser.Sprite, false);\r\n\r\n  this.walls.enableBody = true;\r\n  this.game.physics.arcade.enable(this.walls);\r\n  this.walls.forEach(function (platformSprite) {\r\n    platformSprite.body.immovable = true;\r\n    platformSprite.body.allowGravity = false;\r\n  });\r\n\r\n  // create the spikes (and platform) of the level\r\n  this.hasSpikes = false;\r\n  if (this.map.objects.spikes) {\r\n    this.hasSpikes = true;\r\n\r\n    this.spikes = this.game.add.group();\r\n    this.spikes.openedSpikes = 0;\r\n\r\n    this.map.createFromObjects(\"spikes\", \"\", 'spike-platform', 0, true, false,\r\n      this.walls, Phaser.Sprite, false);\r\n    this.walls.forEach(function (platformSprite) {\r\n      if (platformSprite[\"spike-platform\"] == \"1\") {\r\n        var createdSpike = null;\r\n        if (platformSprite[\"spike-side\"]) {\r\n          createdSpike = _self.addHeightSpike(platformSprite, platformSprite[\"spike-side\"]);\r\n        }\r\n        else {\r\n          createdSpike = _self.addWidthSpike(platformSprite, platformSprite[\"spike-down\"]);\r\n        }\r\n\r\n        // add a reference to the spikes in the platform to they belong which\r\n        platformSprite.spikeRef = createdSpike;\r\n        platformSprite.body.immovable = true;\r\n        platformSprite.body.allowGravity = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  // create the pieces of the level\r\n  this.pieces = this.game.add.group();\r\n  this.map.createFromObjects(\"pieces\", \"\", 'piece', null, true, false,\r\n    this.pieces, Phaser.Sprite, false);\r\n\r\n  this.pieces.forEach(function (pieceSprite) {\r\n    pieceSprite.anchor.set(0.5, 0.5);\r\n    _self.game.physics.arcade.enableBody(pieceSprite);\r\n    pieceSprite.body.allowGravity = false;\r\n    pieceSprite.body.immovable = false;\r\n    pieceSprite.body.friction = new Phaser.Point(0, 0);\r\n  });\r\n\r\n  // get the player initial position\r\n  if (this.map.objects.player_pos) {\r\n    this.initPlayerPos.x = this.map.objects.player_pos[0].x;\r\n    this.initPlayerPos.y = this.map.objects.player_pos[0].y;\r\n  }\r\n\r\n  // show the days of the level\r\n  var dayObj = this.gameObj.days.getDay(parseInt(BasicGame.currentLevel));\r\n  this.dayNumberText.setText(this.dayText[BasicGame.language] + ' ' + dayObj.number);\r\n  this.dayNumberText.y = this.dayNumberText.oriY;\r\n\r\n  // notify to the game that the level is ready\r\n  this.gameObj.levelReady();\r\n};\r\n\r\nBasicGame.Level.prototype.destroyCurrentLevel = function () {\r\n  this.map.destroy();\r\n  if (this.ground) {\r\n    this.ground.destroy();\r\n  }\r\n  this.walls.destroy();\r\n  if (this.hasSpikes) {\r\n    this.spikes.forEach(function (spikeSprite) {\r\n      if (!spikeSprite || !spikeSprite.showTween || !spikeSprite.hideTween) return;\r\n      spikeSprite.showTween.stop();\r\n      spikeSprite.hideTween.stop();\r\n    });\r\n    this.spikes.destroy();\r\n  }\r\n  if (this.pieces) {\r\n    this.pieces.destroy();\r\n  }\r\n  this.dayNumberText.setText(\"\");\r\n};\r\n\r\nBasicGame.Level.prototype.render = function () {\r\n  if (BasicGame.Game.developmentMode === true) {\r\n    var _self = this;\r\n    if (this.spikes) {\r\n      this.spikes.forEach(function (pieceSprite) {\r\n        _self.game.debug.body(pieceSprite, 'rgba(0,0,255,0.8)');\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nBasicGame.Level.prototype.addWidthSpike = function (platformSprite, inBottom) {\r\n  // add the spikes to the platform\r\n  var spikeSprite = null;\r\n\r\n  if (!inBottom) {\r\n    spikeSprite = this.game.add.tileSprite(platformSprite.x,\r\n      platformSprite.y + 5,\r\n      platformSprite.width, 16, \"spike\", 0, this.spikes);\r\n    spikeSprite.isHidden = true;\r\n    spikeSprite.oriY = spikeSprite.y;\r\n    spikeSprite.desY = platformSprite.y - 16;\r\n    this.spikes.openedSpikes++;\r\n  }\r\n  else {\r\n    spikeSprite = this.game.add.tileSprite(platformSprite.x,\r\n      platformSprite.bottom,\r\n      platformSprite.width, 16, \"spike-d\", 0, this.spikes);\r\n    spikeSprite.isHidden = false;\r\n    // spikeSprite.oriY = spikeSprite.y;\r\n    // spikeSprite.desY = platformSprite.y -16;\r\n  }\r\n\r\n  if (!inBottom) {\r\n    // create the tweens for showing and hiding the spikes\r\n    var showSpikeTween = this.createShowSpikeTween(spikeSprite,\r\n      { y: spikeSprite.desY }, 100, 300);\r\n\r\n    var hideSpikeTween = this.game.add.tween(spikeSprite)\r\n      .to({ y: spikeSprite.oriY },\r\n        300,\r\n        Phaser.Easing.Exponential.Out,\r\n        false,\r\n        1000);\r\n    hideSpikeTween.onComplete.add(function () {\r\n      this.isHidden = true;\r\n      this.parent.openedSpikes--;\r\n    }, spikeSprite);\r\n\r\n    spikeSprite.showTween = showSpikeTween;\r\n    spikeSprite.hideTween = hideSpikeTween;\r\n  }\r\n\r\n  // set physics properties for the spikes\r\n  this.game.physics.arcade.enable(spikeSprite);\r\n  spikeSprite.body.immovable = true;\r\n  spikeSprite.body.allowGravity = false;\r\n\r\n\r\n  var numofspikes = platformSprite.width / 32;\r\n  spikeSprite.body.width = platformSprite.width * (numofspikes / (numofspikes + 0.5));\r\n  spikeSprite.body.height = 8;\r\n  spikeSprite.body.offset.x = (platformSprite.width / 2) - (spikeSprite.body.width / 2);\r\n\r\n  if (!inBottom)\r\n    spikeSprite.body.offset.y = 8;\r\n  else\r\n    spikeSprite.body.offset.y = 0;\r\n\r\n  return spikeSprite;\r\n};\r\n\r\nBasicGame.Level.prototype.addHeightSpike = function (platformSprite, side) {\r\n  // add the spikes to the platform\r\n  var spikeSprite = null;\r\n  if (side === 'r') {\r\n    spikeSprite = this.game.add.tileSprite(platformSprite.right - 21,\r\n      platformSprite.y,\r\n      16, platformSprite.height,\r\n      \"spike-r\", 0, this.spikes);\r\n    spikeSprite.isHidden = true;\r\n    spikeSprite.oriX = spikeSprite.x;\r\n    spikeSprite.desX = platformSprite.right;\r\n  }\r\n  else if (side === 'l') {\r\n    spikeSprite = this.game.add.tileSprite(platformSprite.x + 5,\r\n      platformSprite.top,\r\n      16, platformSprite.height,\r\n      \"spike-l\", 0, this.spikes);\r\n    spikeSprite.isHidden = true;\r\n    spikeSprite.oriX = spikeSprite.x;\r\n    spikeSprite.desX = platformSprite.x - 16;\r\n  } else {\r\n    return null;\r\n  }\r\n\r\n  // create the tweens for showing and hiding the spikes\r\n  var showSpikeTween = this.createShowSpikeTween(spikeSprite,\r\n    { x: spikeSprite.desX }, 100, 500);\r\n\r\n  var hideSpikeTween = this.game.add.tween(spikeSprite)\r\n    .to({ x: spikeSprite.oriX },\r\n      300,\r\n      Phaser.Easing.Exponential.Out,\r\n      false,\r\n      1000);\r\n  hideSpikeTween.onComplete.add(function () {\r\n    this.isHidden = true;\r\n    this.parent.openedSpikes--;\r\n  }, spikeSprite);\r\n\r\n  spikeSprite.showTween = showSpikeTween;\r\n  spikeSprite.hideTween = hideSpikeTween;\r\n\r\n  // set physics properties for the spikes\r\n  this.game.physics.arcade.enable(spikeSprite);\r\n  spikeSprite.body.immovable = true;\r\n  spikeSprite.body.allowGravity = false;\r\n\r\n  var numofspikes = platformSprite.height / 32;\r\n  spikeSprite.body.width = 8;\r\n  spikeSprite.body.height = platformSprite.height * (numofspikes / (numofspikes + 0.5));\r\n  spikeSprite.body.offset.y = (platformSprite.height / 2) - (spikeSprite.body.height / 2);\r\n\r\n  if (side === 'r')\r\n    spikeSprite.body.offset.x = 0;\r\n  else\r\n    spikeSprite.body.offset.x = 8;\r\n\r\n  return spikeSprite;\r\n};\r\n\r\nBasicGame.Level.prototype.createShowSpikeTween = function (spikeSprite, properties, duration, delay) {\r\n  var _self = this;\r\n  var showSpikeTween = this.game.add.tween(spikeSprite)\r\n    .to(properties,\r\n      duration,\r\n      null,\r\n      false,\r\n      delay);\r\n\r\n  showSpikeTween.onComplete.add(function () {\r\n    this.isHidden = false;\r\n    this.hideTween.start();\r\n    this.parent.openedSpikes++;\r\n  }, spikeSprite);\r\n\r\n  return showSpikeTween;\r\n};\r\n\r\nBasicGame.Level.prototype.restartLevel = function () {\r\n  // enable the body physics for each piece and make it visible\r\n  this.pieces.forEach(function (pieceSprite) {\r\n    pieceSprite.alpha = 1;\r\n    pieceSprite.body.enable = true;\r\n  });\r\n};\r\n\r\n// ╔═══════════════════════════════════════════════════════════════════════════╗\r\nBasicGame.Level.prototype.shutdown = function () {\r\n  this.levelTextGroup.destroy();\r\n  this.dayNumberText.destroy();\r\n  this.spikeSound.destroy();\r\n  this.map.destroy();\r\n  this.ground.destroy();\r\n  this.walls.destroy();\r\n  this.spikes.destroy();\r\n  this.pieces.destroy();\r\n};\r\n// ╚═══════════════════════════════════════════════════════════════════════════╝",
    "var BasicGame = require('BasicGame');\r\n\r\n/**\r\nThe MIT License (MIT)\r\nCopyright (c) <year> <copyright holders>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\nBasicGame.Light = function (game, gameObj) {\r\n  // destroyable objects\r\n  this.lightGroup = null;\r\n  this.bitmap = null;\r\n  this.lightBitmap = null;\r\n  this.rayBitmap = null;\r\n  this.rayBitmapImage = null;\r\n\r\n  // global properties\r\n  this.game = game;\r\n  this.gameObj = gameObj;\r\n  this.walls = null;\r\n  this.level = null;\r\n  this.shadowsDrawn = null;\r\n};\r\n\r\n// ╔══════════════════════════════════════════════════════════════════════════╗\r\n// ║ PHASER STATE METHODS                                                     ║\r\nBasicGame.Light.prototype.create = function (level) {\r\n  var light = null;\r\n\r\n  this.level = level;\r\n  this.walls = this.level.walls;\r\n  this.shadowsDrawn = false;\r\n\r\n  // Add the light(s)\r\n  this.lightGroup = this.game.add.group();\r\n  light = this.game.add.sprite((this.game.world.width / 2), -16, 'light');\r\n  // light = this.game.add.sprite((this.game.world.width / 2) - 16, -16, 'light');\r\n  light.alpha = 0;\r\n\r\n  // Set the pivot point of the light to the center of the texture\r\n  light.anchor.setTo(0.5, 0.5);\r\n\r\n  //Add the light to the array of lights\r\n  this.lightGroup.add(light);\r\n\r\n  // Create a bitmap texture for drawing light cones\r\n  this.bitmap = this.game.add.bitmapData(this.game.world.width, this.game.height);\r\n  this.bitmap.context.fillStyle = 'rgb(255, 255, 255)';\r\n  this.bitmap.context.strokeStyle = 'rgb(255, 255, 255)';\r\n  this.lightBitmap = this.game.add.image(0, 0, this.bitmap);\r\n\r\n  // This bitmap is drawn onto the screen using the MULTIPLY blend mode.\r\n  // Since this bitmap is over the background, dark areas of the bitmap\r\n  // will make the background darker. White areas of the bitmap will allow\r\n  // the normal colors of the background to show through. Blend modes are\r\n  // only supported in WebGL. If your browser doesn't support WebGL then\r\n  // you'll see gray shadows and white light instead of colors and it\r\n  // generally won't look nearly as cool. So use a browser with WebGL.\r\n  this.lightBitmap.blendMode = Phaser.blendModes.MULTIPLY;\r\n\r\n  // Create a bitmap for drawing rays\r\n  this.rayBitmap = this.game.add.bitmapData(this.game.world.width, this.game.height);\r\n  this.rayBitmapImage = this.game.add.image(0, 0, this.rayBitmap);\r\n  this.rayBitmapImage.visible = false;\r\n};\r\n\r\nBasicGame.Light.prototype.update = function () {\r\n  // if (this.shadowsDrawn === false) {\r\n  this.drawShadows();\r\n  // }\r\n  // draw shadows if light is moving in the level\r\n};\r\n\r\nBasicGame.Light.prototype.shutdown = function () {\r\n  this.lightGroup.destroy();\r\n  this.bitmap.destroy();\r\n  this.lightBitmap.destroy();\r\n  this.rayBitmap.destroy();\r\n  this.rayBitmapImage.destroy();\r\n};\r\n// ║                                                                           ║\r\n// ╚═══════════════════════════════════════════════════════════════════════════╝\r\n\r\nBasicGame.Light.prototype.drawShadows = function () {\r\n  // Move the light to the pointer/touch location\r\n  this.rayBitmapImage.visible = BasicGame.Game.developmentMode || false;\r\n\r\n  if (this.gameObj.inDarkness == true) {\r\n    return;\r\n  }\r\n\r\n  // Next, fill the entire light bitmap with a dark shadow color.\r\n  this.bitmap.context.fillStyle = 'rgb(102, 185, 204)';\r\n  this.bitmap.context.fillRect(0, 0, this.game.world.width, this.game.height);\r\n\r\n  // An array of the stage corners that we'll use later\r\n  var stageCorners = [\r\n    new Phaser.Point(0, 0),\r\n    new Phaser.Point(this.game.world.width, 0),\r\n    new Phaser.Point(this.game.world.width, this.game.height),\r\n    new Phaser.Point(0, this.game.height)\r\n  ];\r\n\r\n  // Ray casting!\r\n  // Cast rays from each light\r\n  this.lightGroup.forEach(function (light) {\r\n    // Cast rays through the corners of each wall towards the stage edge.\r\n    // Save all of the intersection points or ray end points if there was no intersection.\r\n    var points = [];\r\n    var ray = null;\r\n    var intersect;\r\n    var i;\r\n\r\n    this.walls.forEach(function (wall) {\r\n      // Create a ray from the light through each corner out to the edge of the stage.\r\n      // This array defines points just inside of each corner to make sure we hit each one.\r\n      // It also defines points just outside of each corner so we can see to the stage edges.\r\n      var corners = [\r\n        new Phaser.Point(wall.x + 0.1, wall.y + 0.1),\r\n        new Phaser.Point(wall.x - 0.1, wall.y - 0.1),\r\n\r\n        new Phaser.Point(wall.x - 0.1 + wall.width, wall.y + 0.1),\r\n        new Phaser.Point(wall.x + 0.1 + wall.width, wall.y - 0.1),\r\n\r\n        new Phaser.Point(wall.x - 0.1 + wall.width, wall.y - 0.1 + wall.height),\r\n        new Phaser.Point(wall.x + 0.1 + wall.width, wall.y + 0.1 + wall.height),\r\n\r\n        new Phaser.Point(wall.x + 0.1, wall.y - 0.1 + wall.height),\r\n        new Phaser.Point(wall.x - 0.1, wall.y + 0.1 + wall.height)\r\n      ];\r\n\r\n      // Calculate rays through each point to the edge of the stage\r\n      for (i = 0; i < corners.length; i++) {\r\n        var c = corners[i];\r\n\r\n        // Here comes the linear algebra.\r\n        // The equation for a line is y = slope * x + b\r\n        // b is where the line crosses the left edge of the stage\r\n        var slope = (c.y - light.y) / (c.x - light.x);\r\n        var b = light.y - slope * light.x;\r\n\r\n        var end = null;\r\n\r\n        if (c.x === light.x) {\r\n          // Vertical lines are a special case\r\n          if (c.y <= light.y) {\r\n            end = new Phaser.Point(light.x, 0);\r\n          } else {\r\n            end = new Phaser.Point(light.x, this.game.height);\r\n          }\r\n        } else if (c.y === light.y) {\r\n          // Horizontal lines are a special case\r\n          if (c.x <= light.x) {\r\n            end = new Phaser.Point(0, light.y);\r\n          } else {\r\n            end = new Phaser.Point(this.game.world.width, light.y);\r\n          }\r\n        } else {\r\n          // Find the point where the line crosses the stage edge\r\n          var left = new Phaser.Point(0, b);\r\n          var right = new Phaser.Point(this.game.world.width, slope * this.game.world.width + b);\r\n          var top = new Phaser.Point(-b / slope, 0);\r\n          var bottom = new Phaser.Point((this.game.height - b) / slope, this.game.height);\r\n\r\n          // Get the actual intersection point\r\n          if (c.y <= light.y && c.x >= light.x) {\r\n            if (top.x >= 0 && top.x <= this.game.world.width) {\r\n              end = top;\r\n            } else {\r\n              end = right;\r\n            }\r\n          } else if (c.y <= light.y && c.x <= light.x) {\r\n            if (top.x >= 0 && top.x <= this.game.world.width) {\r\n              end = top;\r\n            } else {\r\n              end = left;\r\n            }\r\n          } else if (c.y >= light.y && c.x >= light.x) {\r\n            if (bottom.x >= 0 && bottom.x <= this.game.world.width) {\r\n              end = bottom;\r\n            } else {\r\n              end = right;\r\n            }\r\n          } else if (c.y >= light.y && c.x <= light.x) {\r\n            if (bottom.x >= 0 && bottom.x <= this.game.world.width) {\r\n              end = bottom;\r\n            } else {\r\n              end = left;\r\n            }\r\n          }\r\n        }\r\n\r\n        // Create a ray\r\n        ray = new Phaser.Line(light.x, light.y, end.x, end.y);\r\n\r\n        // Check if the ray intersected the wall\r\n        intersect = this.getWallIntersection(ray);\r\n        if (intersect) {\r\n          // This is the front edge of the light blocking object\r\n          points.push(intersect);\r\n        } else {\r\n          // Nothing blocked the ray\r\n          points.push(ray.end);\r\n        }\r\n      }\r\n    }, this);\r\n\r\n    // Shoot rays at each of the stage corners to see if the corner\r\n    // of the stage is in shadow. This needs to be done so that\r\n    // shadows don't cut the corner.\r\n    for (i = 0; i < stageCorners.length; i++) {\r\n      ray = new Phaser.Line(light.x, light.y,\r\n        stageCorners[i].x, stageCorners[i].y);\r\n      intersect = this.getWallIntersection(ray);\r\n      if (!intersect) {\r\n        // Corner is in light\r\n        points.push(stageCorners[i]);\r\n      }\r\n    }\r\n\r\n    // Now sort the points clockwise around the light\r\n    // Sorting is required so that the points are connected in the right order.\r\n    //\r\n    // This sorting algorithm was copied from Stack Overflow:\r\n    // http://stackoverflow.com/questions/6989100/sort-points-in-clockwise-order\r\n    //\r\n    // Here's a pseudo-code implementation if you want to code it yourself:\r\n    // http://en.wikipedia.org/wiki/Graham_scan\r\n    var center = { x: light.x, y: light.y };\r\n    points = points.sort(function (a, b) {\r\n      if (a.x - center.x >= 0 && b.x - center.x < 0)\r\n        return 1;\r\n      if (a.x - center.x < 0 && b.x - center.x >= 0)\r\n        return -1;\r\n      if (a.x - center.x === 0 && b.x - center.x === 0) {\r\n        if (a.y - center.y >= 0 || b.y - center.y >= 0)\r\n          return 1;\r\n        return -1;\r\n      }\r\n\r\n      // Compute the cross product of vectors (center -> a) x (center -> b)\r\n      var det = (a.x - center.x) * (b.y - center.y) - (b.x - center.x) * (a.y - center.y);\r\n      if (det < 0)\r\n        return 1;\r\n      if (det > 0)\r\n        return -1;\r\n\r\n      // Points a and b are on the same line from the center\r\n      // Check which point is closer to the center\r\n      var d1 = (a.x - center.x) * (a.x - center.x) + (a.y - center.y) * (a.y - center.y);\r\n      var d2 = (b.x - center.x) * (b.x - center.x) + (b.y - center.y) * (b.y - center.y);\r\n      return 1;\r\n    });\r\n\r\n    // Connect the dots and fill in the shape, which are cones of light,\r\n    // with a bright white color. When multiplied with the background,\r\n    // the white color will allow the full color of the background to\r\n    // shine through.\r\n    this.bitmap.context.beginPath();\r\n    this.bitmap.context.fillStyle = 'rgb(255, 255, 255)';\r\n    this.bitmap.context.moveTo(points[0].x, points[0].y);\r\n    for (var j = 0; j < points.length; j++) {\r\n      this.bitmap.context.lineTo(points[j].x, points[j].y);\r\n    }\r\n    this.bitmap.context.closePath();\r\n    this.bitmap.context.fill();\r\n\r\n    if (BasicGame.Game.developmentMode) {\r\n      // Draw each of the rays on the rayBitmap\r\n      this.rayBitmap.context.clearRect(0, 0, this.game.world.width, this.game.height);\r\n      this.rayBitmap.context.beginPath();\r\n      this.rayBitmap.context.strokeStyle = 'rgb(255, 255, 255)';\r\n      this.rayBitmap.context.fillStyle = 'rgb(255, 255, 255)';\r\n      this.rayBitmap.context.moveTo(points[0].x, points[0].y);\r\n      for (var k = 0; k < points.length; k++) {\r\n        this.rayBitmap.context.moveTo(light.x, light.y);\r\n        this.rayBitmap.context.lineTo(points[k].x, points[k].y);\r\n        this.rayBitmap.context.fillRect(points[k].x - 2, points[k].y - 2, 4, 4);\r\n      }\r\n      this.rayBitmap.context.stroke();\r\n    }\r\n\r\n  }, this);\r\n\r\n  // This just tells the engine it should update the texture cache\r\n  this.bitmap.dirty = true;\r\n  if (BasicGame.Game.developmentMode) {\r\n    this.rayBitmap.dirty = true;\r\n  }\r\n\r\n  this.shadowsDrawn = true;\r\n};\r\n\r\n// Given a ray, this function iterates through all of the walls and\r\n// returns the closest wall intersection from the start of the ray\r\n// or null if the ray does not intersect any walls.\r\nBasicGame.Light.prototype.getWallIntersection = function (ray) {\r\n  var distanceToWall = Number.POSITIVE_INFINITY;\r\n  var closestIntersection = null;\r\n\r\n  // For each of the walls...\r\n  this.walls.forEach(function (wall) {\r\n    // Create an array of lines that represent the four edges of each wall\r\n    var lines = [\r\n      new Phaser.Line(wall.x, wall.y, wall.x + wall.width, wall.y),\r\n      new Phaser.Line(wall.x, wall.y, wall.x, wall.y + wall.height),\r\n      new Phaser.Line(wall.x + wall.width, wall.y,\r\n        wall.x + wall.width, wall.y + wall.height),\r\n      new Phaser.Line(wall.x, wall.y + wall.height,\r\n        wall.x + wall.width, wall.y + wall.height)\r\n    ];\r\n\r\n    // Test each of the edges in this wall against the ray.\r\n    // If the ray intersects any of the edges then the wall must be in the way.\r\n    for (var i = 0; i < lines.length; i++) {\r\n      var intersect = Phaser.Line.intersects(ray, lines[i]);\r\n      if (intersect) {\r\n        // Find the closest intersection\r\n        distance =\r\n          this.game.math.distance(ray.start.x, ray.start.y, intersect.x, intersect.y);\r\n        if (distance < distanceToWall) {\r\n          distanceToWall = distance;\r\n          closestIntersection = intersect;\r\n        }\r\n      }\r\n    }\r\n  }, this);\r\n\r\n  return closestIntersection;\r\n};\r\n\r\nBasicGame.Light.prototype.updateWalls = function (level) {\r\n  this.walls = level.walls;\r\n  this.shadowsDrawn = false;\r\n};",
    "var BasicGame = require('BasicGame');\r\n\r\n/**\r\nThe MIT License (MIT)\r\nCopyright (c) <year> <copyright holders>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\nBasicGame.Lightning = function (game, gameObj) {\r\n  // destroyable objects\r\n  this.lightningBitmap = null;\r\n  this.lightning = null;\r\n  this.fakeThing = null;\r\n  this.lightningSound = null;\r\n\r\n  this.game = game;\r\n  this.gameObj = gameObj;\r\n  this.playerObj = null;\r\n  this.eye = null;\r\n  this.level = null;\r\n};\r\n\r\nBasicGame.Lightning.prototype.create = function (eye, player, level) {\r\n  this.playerObj = player;\r\n  this.eye = eye;\r\n  this.level = level;\r\n\r\n  // Create a bitmap for the lightning bolt texture\r\n  this.lightningBitmap = this.game.add.bitmapData(200, 10000);\r\n\r\n  // Create a sprite to hold the lightning bolt texture\r\n  this.lightning = this.game.add.image(this.eye.x,\r\n    this.eye.y + 32,\r\n    this.lightningBitmap);\r\n  this.lightning.anchor.setTo(0.5, 0);\r\n\r\n  this.fakeThing = this.game.add.sprite(-10, -10, \"player\");\r\n  this.fakeThing.anchor.setTo(0.5, 0.5);\r\n  this.fakeThing.width = this.fakeThing.height = 16;\r\n  this.fakeThing.alpha = 0;\r\n\r\n  this.lightningTimer = 0;\r\n\r\n  if (!this.lightningSound) {\r\n    this.lightningSound = this.game.add.sound('ray', 0.2);\r\n  }\r\n};\r\n\r\nBasicGame.Lightning.prototype.update = function () {\r\n  // check if the ray hits the player\r\n  if (this.playerObj.playerSprite && this.fakeThing) {\r\n    if (this.fakeThing.left > this.playerObj.playerSprite.left &&\r\n      this.fakeThing.right < this.playerObj.playerSprite.right &&\r\n      this.fakeThing.top > this.playerObj.playerSprite.top &&\r\n      this.fakeThing.bottom < this.playerObj.playerSprite.bottom) {\r\n      this.gameObj.subtractLife();\r\n      this.gameObj.shakeCamera();\r\n    }\r\n    this.fakeThing.x = this.fakeThing.y = -10;\r\n  }\r\n};\r\n\r\nBasicGame.Lightning.prototype.shoot = function (target) {\r\n  this.fakeThing.x = this.fakeThing.y = 0;\r\n  var targetPos = {\r\n    x: target.centerX,\r\n    y: target.centerY\r\n  };\r\n\r\n  // Rotate the lightning sprite so it goes in the\r\n  // direction of the pointer\r\n  this.lightning.rotation = this.game.math.angleBetween(\r\n    this.lightning.x, this.lightning.y,\r\n    targetPos.x, targetPos.y\r\n  ) - Math.PI / 2;\r\n\r\n  // Calculate the distance from the lightning source to the pointer\r\n  var distance = this.game.math.distance(\r\n    this.lightning.x, this.lightning.y,\r\n    targetPos.x, targetPos.y\r\n  );\r\n\r\n  // Create the lightning texture\r\n  this.createLightningTexture(this.lightningBitmap.width / 2, 0, 20, 2, false, distance);\r\n\r\n  // Make the lightning sprite visible\r\n  this.lightning.alpha = 1;\r\n\r\n  // Fade out the lightning sprite using a tween on the alpha property\r\n  // Check out the \"Easing function\" examples for more info.\r\n  this.game.add.tween(this.lightning)\r\n    .to({ alpha: 0.5 }, 100, Phaser.Easing.Bounce.Out)\r\n    .to({ alpha: 1.0 }, 100, Phaser.Easing.Bounce.Out)\r\n    .to({ alpha: 0.5 }, 100, Phaser.Easing.Bounce.Out)\r\n    .to({ alpha: 1.0 }, 100, Phaser.Easing.Bounce.Out)\r\n    .to({ alpha: 0 }, 250, Phaser.Easing.Cubic.In)\r\n    .start();\r\n\r\n  this.fakeThing.x = targetPos.x;\r\n  this.fakeThing.y = targetPos.y;\r\n\r\n  this.lightningSound.play();\r\n};\r\n\r\n// This function creates a texture that looks like a lightning bolt\r\nBasicGame.Lightning.prototype.createLightningTexture = function (x, y, segments, boltWidth, branch, distance) {\r\n  // Get the canvas drawing context for the lightningBitmap\r\n  var ctx = this.lightningBitmap.context;\r\n  var width = this.lightningBitmap.width;\r\n  var height = this.lightningBitmap.height;\r\n\r\n  // Our lightning will be made up of several line segments starting at\r\n  // the center of the top edge of the bitmap and ending at the target.\r\n\r\n  // Clear the canvas\r\n  if (!branch) ctx.clearRect(0, 0, width, height);\r\n\r\n  // Draw each of the segments\r\n  for (var i = 0; i < segments; i++) {\r\n    // Set the lightning color and bolt width\r\n    ctx.strokeStyle = 'rgb(255, 255, 255)';\r\n    ctx.lineWidth = boltWidth;\r\n\r\n    ctx.beginPath();\r\n    ctx.moveTo(x, y);\r\n\r\n    // Calculate an x offset from the end of the last line segment and\r\n    // keep it within the bounds of the bitmap\r\n    if (branch) {\r\n      // For a branch\r\n      x += this.game.rnd.integerInRange(-10, 10);\r\n    } else {\r\n      // For the main bolt\r\n      x += this.game.rnd.integerInRange(-30, 30);\r\n    }\r\n    if (x <= 10) x = 10;\r\n    if (x >= width - 10) x = width - 10;\r\n\r\n    // Calculate a y offset from the end of the last line segment.\r\n    // When we've reached the target or there are no more segments left,\r\n    // set the y position to the distance to the target. For branches, we\r\n    // don't care if they reach the target so don't set the last coordinate\r\n    // to the target if it's hanging in the air.\r\n    if (branch) {\r\n      // For a branch\r\n      y += this.game.rnd.integerInRange(10, 20);\r\n    } else {\r\n      // For the main bolt\r\n      y += this.game.rnd.integerInRange(20, distance / segments);\r\n    }\r\n    if ((!branch && i == segments - 1) || y > distance) {\r\n      // This causes the bolt to always terminate at the center\r\n      // lightning bolt bounding box at the correct distance to\r\n      // the target. Because of the way the lightning sprite is\r\n      // rotated, this causes this point to be exactly where the\r\n      // player clicked or tapped.\r\n      y = distance;\r\n      if (!branch) x = width / 2;\r\n    }\r\n\r\n    // draw the line segment\r\n    ctx.lineTo(x, y);\r\n    ctx.stroke();\r\n\r\n    // quit when we've reached the target\r\n    if (y >= distance) break;\r\n\r\n  }\r\n\r\n  // This just tells the engine it should update the texture cache\r\n  this.lightningBitmap.dirty = true;\r\n};\r\n\r\nBasicGame.Lightning.prototype.updateLevel = function (level) {\r\n  this.level = level;\r\n};\r\n\r\n// ╔═══════════════════════════════════════════════════════════════════════════╗\r\nBasicGame.Lightning.prototype.shutdown = function () {\r\n  this.lightningBitmap.destroy();\r\n  this.lightning.destroy();\r\n  this.fakeThing.destroy();\r\n  this.lightningSound.destroy();\r\n};\r\n// ╚═══════════════════════════════════════════════════════════════════════════╝",
    "var BasicGame = require('BasicGame');\r\n\r\n/**\r\nThe MIT License (MIT)\r\nCopyright (c) <year> <copyright holders>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\n\r\nBasicGame.Player = function (game, input, gameObj) {\r\n  // constants\r\n  this.DIALOGUE_TEXT_MAX_WIDTH = 292;\r\n  this.DIALOGUE_TEXT_H_PADDING = 10;\r\n  this.DIALOGUE_TEXT_V_PADDING = 5;\r\n  this.FADE_SPEED = 300;\r\n  this.DIALOGUE_WIDTH = this.DIALOGUE_TEXT_MAX_WIDTH + this.DIALOGUE_TEXT_H_PADDING * 2;\r\n  this.STRETCH_SQUASH_VALUE = 8;\r\n  this.BASE_SIZE = 32;\r\n  this.HALF_SIZE = this.BASE_SIZE / 2;\r\n\r\n  // destroyable objects\r\n  this.playerSprite = null;\r\n  this.particlesGroup = null;\r\n  this.jumpSound = null;\r\n  this.walkSound = null;\r\n  this.slideSound = null;\r\n  this.fallSound = null;\r\n  this.deathSound = null;\r\n  this.pieceSound = null;\r\n  this.dialogueGroup = null;\r\n  this.dialogueBackground = null;\r\n  this.dialogueMark = null;\r\n  this.dialogueText = null;\r\n\r\n  // global properties\r\n  this.game = game;\r\n  this.input = input;\r\n  this.gameObj = gameObj;\r\n  this.playerSprite = null;\r\n  this.level = null;\r\n  this.bitmap = null;\r\n  this.collectedPieces = 0;\r\n  this.jumpPressed = false;\r\n  this.currentJumpMultiplier = 0;\r\n  this.jumpChance = false;\r\n  this.walkInAirTimer = null;\r\n  this.fontId = 'font';\r\n  this.dialogueDisplayed = false;\r\n  this.flipDialogueH = false;\r\n  this.dialogueFadeOutStarted = false;\r\n  this.jumpFeedbackStarted = false;\r\n  this.dialogueMarkHeight = null;\r\n\r\n  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n  // define movement constants\r\n  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n\r\n  // speed of movement in X axis\r\n  this.MAX_SPEED = 300;\r\n\r\n  // base speed of movement in X axis when an arrow key (left, right) is pressed\r\n  // in ground\r\n  this.ACCELERATION = 2500;\r\n\r\n  // base speed of movement in X axis when an arrow key (left, right) is pressed\r\n  // while jumping from a wall\r\n  this.ACCELERATION_WALL = 12000;\r\n\r\n  // pixels per second used in character falls\r\n  this.GRAVITY = 2600;\r\n\r\n  // base speed used to make the character jump\r\n  this.JUMP_SPEED = -850;\r\n\r\n  // base speed used to make the character jump while is against a wall\r\n  this.JUMP_SPEED_WALL = -850;\r\n\r\n\r\n  this.SLID_SPEED = 1;\r\n  this.JUMP_TIME = 150;\r\n  this.JUMP_MULTIPLIER_AMOUNT = 0.01;\r\n  this.JUMP_MULTIPLIER_MAX = 0.23;\r\n  this.JUMP_MULTIPLIER = 0.3;\r\n\r\n  // define gameplay keys\r\n  this.leftKey1 = Phaser.Keyboard.LEFT;\r\n  this.leftKey2 = Phaser.Keyboard.A;\r\n  this.rightKey1 = Phaser.Keyboard.RIGHT;\r\n  this.rightKey2 = Phaser.Keyboard.D;\r\n  this.jumpKey1 = Phaser.Keyboard.Z;\r\n  this.jumpKey2 = Phaser.Keyboard.SPACEBAR;\r\n  this.jumpKey3 = Phaser.Keyboard.UP;\r\n  this.jumpKey4 = Phaser.Keyboard.W;\r\n  this.downKey1 = Phaser.Keyboard.DOWN;\r\n  this.downKey2 = Phaser.Keyboard.S;\r\n\r\n  this.justLeaveGround = false;\r\n\r\n  this.jumpSound = null;\r\n  this.walkSound = null;\r\n  this.slideSound = null;\r\n  this.fallSound = null;\r\n  this.deathSound = null;\r\n  // this.piecesSound = [];\r\n  this.pieceSound = null;\r\n\r\n  this.jumpCount = 0;\r\n  this.dead = false;\r\n\r\n  this.leftFirstPress = false;\r\n  this.rightFirstPress = false;\r\n\r\n  this.particlesGroup = null;\r\n  this.PARTICLES_AMOUNT = 4;\r\n};\r\n\r\n// ╔══════════════════════════════════════════════════════════════════════════╗\r\n// ║ PHASER STATE METHODS                                                     ║\r\nBasicGame.Player.prototype.create = function (level) {\r\n  var particle = null,\r\n    particleX = null,\r\n    particleY = null,\r\n    increaseAmount = null;\r\n\r\n  //Save the walls in the level\r\n  this.level = level;\r\n\r\n  //Put the player in the game's world\r\n  this.playerSprite = this.game.add.sprite(0, 0, 'player');\r\n  this.playerSprite.anchor.setTo(0.5, 1);\r\n\r\n  //Enable physics on the player\r\n  this.game.physics.arcade.enable(this.playerSprite);\r\n\r\n  //Set player minimum and maximum movement speed\r\n  this.playerSprite.body.maxVelocity.setTo(this.MAX_SPEED, this.MAX_SPEED * 20);\r\n\r\n  //Since we're jumping we need gravity\r\n  this.game.physics.arcade.gravity.y = this.GRAVITY;\r\n\r\n  this.setPlayerPositionInLevel();\r\n\r\n  //Capture certain keys to prevent their default actions in the browser.\r\n  //This is only necessary because this is an HTML5 game. Games on other\r\n  //platforms may not need code like this.\r\n  this.game.input.keyboard.addKeyCapture([\r\n    this.leftKey1,\r\n    this.rightKey1,\r\n    this.jumpKey1,\r\n    this.jumpKey2,\r\n    this.downKey1\r\n  ]);\r\n\r\n  // disable physics in the player's body while the game starts\r\n  this.playerSprite.body.enable = false;\r\n\r\n  // create a bitmap texture for drawing lines\r\n  if (BasicGame.Game.developmentMode === true) { // [ development mode ]\r\n    this.bitmap = this.game.add.bitmapData(this.game.width, this.game.height);\r\n    this.bitmap.context.fillStyle = 'rgb(0, 0, 255)';\r\n    this.bitmap.context.strokeStyle = 'rgb(0, 0, 255)';\r\n    this.game.add.image(0, 0, this.bitmap);\r\n  }\r\n\r\n  if (!this.jumpSound) {\r\n    this.jumpSound = this.game.add.sound('jump', 0.2);\r\n    this.jumpSound.onPlay.add(function () {\r\n      this.slideSound.stop();\r\n    }, this);\r\n  }\r\n\r\n  if (!this.walkSound) {\r\n    this.walkSound = this.game.add.sound('walk', 0.1);\r\n    this.walkSound.onPlay.add(function () {\r\n      this.slideSound.stop();\r\n    }, this);\r\n    this.walkSound.onStop.add(function () {\r\n      if (this.onGround === true) {\r\n        this.slideSound.play();\r\n      }\r\n    }, this);\r\n  }\r\n\r\n  if (!this.slideSound) {\r\n    this.slideSound = this.game.add.sound('slide', 0.08, true);\r\n  }\r\n\r\n  if (!this.fallSound) {\r\n    this.fallSound = this.game.add.sound('fall', 0.1);\r\n  }\r\n\r\n  if (!this.deathSound) {\r\n    this.deathSound = this.game.add.sound('death', 0.3);\r\n    this.deathSound.onPlay.add(function () {\r\n      this.slideSound.stop();\r\n    }, this);\r\n  }\r\n\r\n  // load the audio for pieces\r\n  if (!this.pieceSound) {\r\n    this.pieceSound = this.game.add.sound('piece', 0.2);\r\n  }\r\n\r\n  // create the group that will contain the particles that will be used during\r\n  // player death\r\n  this.particlesGroup = this.game.add.group();\r\n\r\n  particleX = 0;\r\n  particleY = 0;\r\n  increaseAmount = this.playerSprite.width / this.PARTICLES_AMOUNT;\r\n\r\n  while (this.particlesGroup.children.length < Math.pow(this.PARTICLES_AMOUNT, 2)) {\r\n    particle = this.game.add.sprite(particleX, particleY, 'player');\r\n    particle.width = particle.height = increaseAmount;\r\n    particle.originalX = particle.x;\r\n    particle.originalY = particle.y;\r\n\r\n    this.game.physics.arcade.enable(particle);\r\n    particle.body.allowGravity = false;\r\n\r\n    this.particlesGroup.addChild(particle);\r\n\r\n    particleX += particle.width;\r\n    if (particleX >= this.playerSprite.width) {\r\n      particleX = 0;\r\n      particleY += particle.height;\r\n    }\r\n  }\r\n\r\n  this.particlesGroup.x = -100;\r\n  this.particlesGroup.y = -100;\r\n\r\n  // ═ dialogue ═══════════════════════════════════════════════════════════════╗\r\n  this.dialogueGroup = this.game.add.group();\r\n\r\n  this.dialogueBackground = this.game.add.image(0, 0, 'dialogue_background', 0, this.dialogueGroup);\r\n  this.dialogueBackground.width = this.DIALOGUE_WIDTH;\r\n  this.dialogueBackground.height = this.DIALOGUE_TEXT_V_PADDING * 2;\r\n\r\n  this.dialogueMark = this.game.add.image(0, 0, 'dialogue_mark', 0, this.dialogueGroup);\r\n  this.dialogueMark.y = this.dialogueBackground.height + 8;\r\n  this.dialogueMarkHeight = this.dialogueMark.height;\r\n\r\n  // create the bitmap for the day phrase\r\n  this.dialogueText = this.game.add.bitmapText(0, 0, this.fontId, '', 18, this.dialogueGroup);\r\n  this.dialogueText.x = this.DIALOGUE_TEXT_H_PADDING;\r\n  this.dialogueText.y = this.DIALOGUE_TEXT_V_PADDING;\r\n  this.dialogueText.maxWidth = this.DIALOGUE_TEXT_MAX_WIDTH;\r\n  this.dialogueText.tint = 0x161a1e;\r\n\r\n  this.dialogueGroup.alpha = 0;\r\n  // ══════════════════════════════════════════════════════════════════════════╝\r\n};\r\n\r\nBasicGame.Player.prototype.update = function () {\r\n  var leftPressed = false;\r\n  var rightPressed = false;\r\n  var upPressed = false;\r\n  var downPressed = false;\r\n  var onRightWall = false;\r\n  var onLeftWall = false;\r\n  var headHit = false;\r\n  var jumpMul = 0;\r\n\r\n  // update the position of the dialogue bubble based on the player's position\r\n  this.placeDialogueGroup();\r\n\r\n  this.game.physics.arcade.isPaused = this.gameObj.isLoadingLevel;\r\n  if (this.gameObj.isLoadingLevel) {\r\n    this.playerSprite.body.velocity.y = 0;\r\n    return;\r\n  }\r\n\r\n  if (this.gameObj.isLoadingLevel === true || this.dead === true) {\r\n    if (this.dead === true) {\r\n      this.playerSprite.body.acceleration.x = 0;\r\n\r\n      // check if a particle is out of the world to disable its gravity\r\n      this.particlesGroup.forEach(function (particle) {\r\n        var particleX = this.particlesGroup.x + particle.x;\r\n        var particleY = this.particlesGroup.y + particle.y;\r\n        if (particleX < 0 || particleX > this.game.world.width ||\r\n          particleY > this.game.world.height) {\r\n          particle.body.allowGravity = false;\r\n          particle.body.acceleration.x = 0;\r\n          particle.body.velocity.y = 0;\r\n        }\r\n      }, this);\r\n    }\r\n    return;\r\n  }\r\n\r\n  if (this.playerSprite.top > this.game.world.height) {\r\n    this.dead = true;\r\n    this.playerSprite.body.velocity.y = 0;\r\n    this.playerSprite.body.allowGravity = false;\r\n    this.gameObj.subtractAllLifes();\r\n    return;\r\n  }\r\n\r\n  // ___________________________________________________________________________\r\n  // check collisions\r\n  // ___________________________________________________________________________\r\n  this.checkCollisions();\r\n\r\n  // ___________________________________________________________________________\r\n  // handle player movement\r\n  // ___________________________________________________________________________\r\n\r\n  leftPressed = this.leftInputIsActive() === true;\r\n  rightPressed = this.rightInputIsActive() === true;\r\n  upPressed = this.upInputIsActive() === true;\r\n  downPressed = this.downInputIsActive() === true;\r\n\r\n  if (this.duckTweenPlaying === true && !downPressed) {\r\n    this.playBaseSizeTween();\r\n    this.duckTweenPlaying = false;\r\n  }\r\n\r\n  if (leftPressed || rightPressed || upPressed) {\r\n    if (this.dialogueDisplayed === true && this.dialogueFadeOutStarted === false) {\r\n      // if the player is moving and the dialogue box is visible, start the timer\r\n      // to fade it out\r\n      this.dialogueFadeOutStarted = true;\r\n      this.gameObj.helper.timer(this.waitTime, this.hideDialogue, this);\r\n    }\r\n\r\n    if (this.gameObj.eye.eye.frame === 3) {\r\n      this.gameObj.eye.initSearch();\r\n    }\r\n  }\r\n\r\n  if (this.playerSprite.touchingPiece === false) {\r\n    this.onGround = this.playerSprite.body.touching.down === true;\r\n    onRightWall = this.playerSprite.body.touching.right === true && this.playerSprite.body.velocity.y > -500;\r\n    onLeftWall = this.playerSprite.body.touching.left === true && this.playerSprite.body.velocity.y > -500;\r\n    headHit = this.playerSprite.body.touching.up === true && this.onGround === false;\r\n  }\r\n\r\n  if (headHit) {\r\n    this.isJumping = false;\r\n  }\r\n\r\n  // jump jump jump\r\n  if (this.isJumping && this.jumpFeedbackStarted === false) {\r\n    this.jumpFeedback();\r\n  }\r\n\r\n  if (this.onGround || onRightWall || onLeftWall) {\r\n    this.jumpCount = 0;\r\n  }\r\n\r\n  // reset some values to default if the player is touching the ground\r\n  if (this.onGround) {\r\n    this.onGroundFeedback();\r\n  }\r\n  else {\r\n    this.walkSound.stop();\r\n    this.slideSound.stop();\r\n\r\n    // check if the character just left the ground\r\n    if (this.justLeaveGround === false && this.playerSprite.body.velocity.y > 0) {\r\n      this.justLeaveGround = true;\r\n\r\n      // create a time to allow the player walk in the air for a while after\r\n      // leaving a platform\r\n      this.walkInAirTimer = this.game.time.create(true);\r\n      this.walkInAirTimer.add(150, function () {\r\n        this.jumpCount++;\r\n      }, this);\r\n\r\n      // restart the position of the player's body after an amount of time has\r\n      // passed\r\n      this.walkInAirTimer.start();\r\n    }\r\n  }\r\n\r\n  // handle behaviour of player on walls\r\n  if (onRightWall || onLeftWall) {\r\n    this.onWallFeedback();\r\n    this.playerSprite.body.velocity.y = this.SLID_SPEED;\r\n\r\n    this.currentJumpMultiplier = 0;\r\n    this.jumpChance = false;\r\n  }\r\n\r\n  if (leftPressed && this.playerSprite.left > 0) {\r\n    // set the player velocity to move left\r\n    this.rightFirstPress = false;\r\n    this.playerSprite.body.acceleration.x = -this.ACCELERATION;\r\n\r\n    if (this.onGround) {\r\n      if (!this.leftFirstPress) {\r\n        this.leftFirstPress = true;\r\n        this.currentJumpMultiplier = 0;\r\n        this.walkFeedback(true);\r\n      }\r\n      else {\r\n        this.currentJumpMultiplier += this.JUMP_MULTIPLIER_AMOUNT;\r\n      }\r\n    }\r\n    else {\r\n      if (!onLeftWall) {\r\n        this.slideSound.stop();\r\n      }\r\n      else if (upPressed) {\r\n        this.playerSprite.body.acceleration.x = this.ACCELERATION_WALL;\r\n        this.playerSprite.body.velocity.y = this.JUMP_SPEED_WALL;\r\n\r\n        if (this.isJumping && this.jumpFeedbackStarted === false) {\r\n          this.jumpFeedback();\r\n        }\r\n      }\r\n    }\r\n  }\r\n  else if (rightPressed && this.playerSprite.right < this.game.world.width) {\r\n    // If the RIGHT key is down, set the player velocity to move right\r\n    this.leftFirstPress = false;\r\n    this.playerSprite.body.acceleration.x = this.ACCELERATION;\r\n\r\n    if (this.onGround) {\r\n      if (this.rightFirstPress === false) {\r\n        this.rightFirstPress = true;\r\n        this.currentJumpMultiplier = 0;\r\n        this.walkFeedback();\r\n      }\r\n      else {\r\n        this.currentJumpMultiplier += this.JUMP_MULTIPLIER_AMOUNT;\r\n      }\r\n    }\r\n    else {\r\n      if (!onRightWall) {\r\n        this.slideSound.stop();\r\n      }\r\n      else if (upPressed) {\r\n        this.playerSprite.body.acceleration.x = -this.ACCELERATION_WALL;\r\n        this.playerSprite.body.velocity.y = this.JUMP_SPEED_WALL;\r\n\r\n        if (this.isJumping && this.jumpFeedbackStarted === false) {\r\n          this.jumpFeedback();\r\n        }\r\n      }\r\n    }\r\n  }\r\n  else {\r\n    // not moving in X direction\r\n    this.leftFirstPress = this.rightFirstPress = false;\r\n    this.playerSprite.body.acceleration.x = 0;\r\n    this.playerSprite.body.velocity.x = 0;\r\n    this.currentJumpMultiplier = 0;\r\n    this.walkSound.stop();\r\n    this.slideSound.stop();\r\n\r\n    if (downPressed) {\r\n      this.duckFeedback();\r\n    }\r\n\r\n    /* if (this.walkTweenPlayed === true) {\r\n      this.playBaseSizeTween();\r\n      this.walkTweenPlayed = false;\r\n    } */\r\n  }\r\n\r\n  if (upPressed && !headHit) {\r\n    jumpMul = Math.min(this.currentJumpMultiplier, this.JUMP_MULTIPLIER_MAX);\r\n    this.playerSprite.body.velocity.y = this.JUMP_SPEED;\r\n    this.playerSprite.body.velocity.y += this.JUMP_SPEED * jumpMul;\r\n    this.jumpMultiplier = this.JUMP_MULTIPLIER;\r\n    if (!this.isJumping) {\r\n      this.isJumping = true;\r\n    }\r\n  }\r\n  else {\r\n    this.isJumping = false;\r\n  }\r\n\r\n  // sprite out of the bounds of the game world\r\n  if (this.playerSprite.left < 0) this.playerSprite.left = 0;\r\n  if (this.playerSprite.right > this.game.world.width) this.playerSprite.left = this.game.world.width - this.playerSprite.width;\r\n\r\n  // make the jump a bit higher if the player keeps pressing the jump button\r\n  // if (this.input.keyboard.downDuration(this.jumpKey1, this.JUMP_TIME) === true ||\r\n  //     this.input.keyboard.downDuration(this.jumpKey2, this.JUMP_TIME)\r\n  // ) {\r\n  //   this.playerSprite.body.velocity.y += this.JUMP_SPEED * 0.1 * this.jumpMultiplier;\r\n  //   if (this.jumpMultiplier > 0.1)\r\n  //     this.jumpMultiplier *= 0.95;\r\n  //   else\r\n  //     this.jumpMultiplier = 0;\r\n  // }\r\n  // else {\r\n  //   this.jumpMultiplier = 0;\r\n  // }\r\n\r\n  if (headHit && !this.fallSound.isPlaying) {\r\n    this.fallSound.play();\r\n  }\r\n\r\n  if (BasicGame.Game.developmentMode === true) { // [ development mode ]\r\n    this.bitmap.dirty = true;\r\n  }\r\n};\r\n\r\nBasicGame.Player.prototype.render = function () {\r\n  if (BasicGame.Game.developmentMode === true) { // [ development mode ]\r\n    // Sprite debug info\r\n    this.game.debug.bodyInfo(this.playerSprite, 0, 100, 'rgba(0,255,0,0.4)');\r\n    // this.game.debug.body(this.playerSprite, 'rgba(0,255,0,0.4)');\r\n  }\r\n\r\n  if (BasicGame.Game.developmentMode === true) { // [ development mode ]\r\n    // clear the bitmap where we are drawing our lines\r\n    this.bitmap.context.clearRect(0, 0, this.game.width, this.game.height);\r\n  }\r\n};\r\n\r\nBasicGame.Player.prototype.shutdown = function () {\r\n  this.playerSprite.destroy();\r\n  this.particlesGroup.destroy();\r\n  this.jumpSound.destroy();\r\n  this.walkSound.destroy();\r\n  this.slideSound.destroy();\r\n  this.fallSound.destroy();\r\n  this.deathSound.destroy();\r\n  this.pieceSound.destroy();\r\n};\r\n// ║                                                                           ║\r\n// ╚═══════════════════════════════════════════════════════════════════════════╝\r\n\r\nBasicGame.Player.prototype.leftInputIsActive = function () {\r\n  return this.input.keyboard.isDown(this.leftKey1) ||\r\n    this.input.keyboard.isDown(this.leftKey2);\r\n};\r\n\r\nBasicGame.Player.prototype.rightInputIsActive = function () {\r\n  return this.input.keyboard.isDown(this.rightKey1) ||\r\n    this.input.keyboard.isDown(this.rightKey2);\r\n};\r\n\r\nBasicGame.Player.prototype.upInputIsActive = function (duration) {\r\n  if ((this.input.keyboard.downDuration(this.jumpKey1, duration) ||\r\n    this.input.keyboard.downDuration(this.jumpKey2, duration) ||\r\n    this.input.keyboard.downDuration(this.jumpKey3, duration) ||\r\n    this.input.keyboard.downDuration(this.jumpKey4, duration)) &&\r\n    this.jumpCount === 0) {\r\n    this.jumpCount++;\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nBasicGame.Player.prototype.downInputIsActive = function () {\r\n  return this.input.keyboard.isDown(this.downKey1) ||\r\n    this.input.keyboard.isDown(this.downKey2);\r\n};\r\n\r\nBasicGame.Player.prototype.onGroundFeedback = function () {\r\n  var squashTween = null;\r\n  if (this.justLeaveGround === true && !this.squashTweenPlaying) {\r\n    squashTween = this.game.add.tween(this.playerSprite);\r\n    squashTween.to({\r\n      width: this.BASE_SIZE + this.STRETCH_SQUASH_VALUE,\r\n      height: this.BASE_SIZE - this.STRETCH_SQUASH_VALUE\r\n    }, 150, Phaser.Easing.Exponential.Out);\r\n    squashTween.onComplete.add(function () {\r\n      this.playBaseSizeTween();\r\n      this.squashTweenPlaying = false;\r\n    }, this);\r\n    squashTween.start();\r\n    this.squashTweenPlaying = true;\r\n  }\r\n\r\n  this.isFalling = false;\r\n  this.isJumping = false;\r\n\r\n  if (this.justLeaveGround === true) {\r\n    this.fallSound.play();\r\n  }\r\n\r\n  this.justLeaveGround = false;\r\n};\r\n\r\nBasicGame.Player.prototype.walkFeedback = function (left) {\r\n  var squashTween = null;\r\n\r\n  if (!this.walkTweenPlayed) {\r\n    squashTween = this.game.add.tween(this.playerSprite);\r\n    squashTween.to({\r\n      width: this.BASE_SIZE + this.STRETCH_SQUASH_VALUE / 1.5\r\n    }, 150, Phaser.Easing.Exponential.Out);\r\n    squashTween.onComplete.add(function () {\r\n      this.playBaseSizeTween();\r\n      this.walkTweenPlayed = false;\r\n    }, this);\r\n    squashTween.start();\r\n    this.walkTweenPlayed = true;\r\n  }\r\n\r\n  if (!this.walkSound.isPlaying) {\r\n    this.walkSound.play();\r\n  }\r\n};\r\n\r\nBasicGame.Player.prototype.duckFeedback = function () {\r\n  var squashTween = null;\r\n\r\n  if (!this.duckTweenPlaying) {\r\n    squashTween = this.game.add.tween(this.playerSprite);\r\n    squashTween.to({\r\n      width: this.BASE_SIZE + this.STRETCH_SQUASH_VALUE,\r\n      height: this.BASE_SIZE - this.STRETCH_SQUASH_VALUE\r\n    }, 150, Phaser.Easing.Exponential.Out);\r\n    // squashTween.onComplete.add(function () {\r\n    //   this.playBaseSizeTween();\r\n    //   this.duckTweenPlaying = false;\r\n    // }, this);\r\n    squashTween.start();\r\n    this.duckTweenPlaying = true;\r\n  }\r\n};\r\n\r\nBasicGame.Player.prototype.onWallFeedback = function () {\r\n  this.playBaseSizeTween();\r\n  if (!this.slideSound.isPlaying) this.slideSound.play();\r\n};\r\n\r\nBasicGame.Player.prototype.playBaseSizeTween = function () {\r\n  var baseSizeTween = null;\r\n  if (this.playerSprite.width !== this.BASE_SIZE && !this.baseSizeTweenPlaying) {\r\n    baseSizeTween = this.game.add.tween(this.playerSprite);\r\n    baseSizeTween.to({\r\n      width: this.BASE_SIZE,\r\n      height: this.BASE_SIZE\r\n    }, 150, Phaser.Easing.Exponential.Out);\r\n    baseSizeTween.onComplete.add(function () {\r\n      this.playerSprite.width = this.BASE_SIZE;\r\n      this.playerSprite.height = this.BASE_SIZE;\r\n      this.baseSizeTweenPlaying = false;\r\n    }, this);\r\n    baseSizeTween.start();\r\n    this.baseSizeTweenPlaying = true;\r\n  }\r\n};\r\n\r\nBasicGame.Player.prototype.jumpFeedback = function () {\r\n  var stretchTween;\r\n\r\n  this.jumpFeedbackStarted = true;\r\n\r\n  stretchTween = this.game.add.tween(this.playerSprite);\r\n  stretchTween.to({\r\n    width: this.BASE_SIZE - this.STRETCH_SQUASH_VALUE,\r\n    height: this.BASE_SIZE + this.STRETCH_SQUASH_VALUE\r\n  }, 200, Phaser.Easing.Exponential.Out);\r\n  stretchTween.onComplete.add(function () {\r\n    this.jumpFeedbackStarted = false;\r\n  }, this);\r\n  stretchTween.start();\r\n\r\n  // this.isJumping = true;\r\n  this.currentJumpMultiplier = 0;\r\n\r\n  if (!this.jumpSound.isPlaying) {\r\n    this.jumpSound.play();\r\n  }\r\n};\r\n\r\n/**\r\n * Method that checks collisions against walls, the ground and collectable pieces\r\n */\r\nBasicGame.Player.prototype.checkCollisions = function () {\r\n  this.playerSprite.touchingPiece = false;\r\n\r\n  if (this.level.hasFloor === true) {\r\n    this.game.physics.arcade.collide(this.playerSprite, this.level.ground);\r\n  }\r\n\r\n  // check if the player touches a piece\r\n  this.game.physics.arcade.overlap(this.playerSprite, this.level.pieces,\r\n    function (player, piece) {\r\n      player.touchingPiece = true;\r\n      piece.body.enable = false;\r\n      piece.alpha = 0;\r\n\r\n      // (this.piecesSound[this.collectedPieces++]).play();\r\n      this.collectedPieces++;\r\n      this.pieceSound.play();\r\n\r\n      if (this.collectedPieces === this.level.pieces.children.length) {\r\n        // the level has been finished\r\n        this.gameObj.levelEnded();\r\n      }\r\n    },\r\n    null,\r\n    this);\r\n\r\n  if (this.level.hasSpikes === true) {\r\n    this.game.physics.arcade.collide(this.playerSprite, this.level.walls,\r\n      function (player, spikePlatform) {\r\n        if (spikePlatform.spikeRef && spikePlatform.spikeRef.isHidden === true) {\r\n          if (this.gameObj.level.spikeSound.isPlaying === false) {\r\n            this.gameObj.level.spikeSound.play();\r\n          }\r\n          spikePlatform.spikeRef.showTween.start();\r\n        }\r\n      }, null, this);\r\n\r\n    if (this.level.spikes.openedSpikes > 0) {\r\n      this.game.physics.arcade.overlap(this.playerSprite, this.level.spikes,\r\n        function (player, spike) {\r\n          if (this.dead === false) {\r\n            this.gameObj.subtractAllLifes(true);\r\n          }\r\n        }, null, this);\r\n    }\r\n  } else {\r\n    this.game.physics.arcade.collide(this.playerSprite, this.level.walls);\r\n  }\r\n};\r\n\r\n\r\n//Function that checks if  the player is completely in shadows or not\r\nBasicGame.Player.prototype.isInShadow = function (checkLeft, checkRight) {\r\n  //Trace rays toward the light from each corner of the player sprite.\r\n  //If ALL the rays intersects a wall, then the player is in the shadows\r\n  var lightImage = BasicGame.light.lightGroup.getAt(0);\r\n  var raysToLight = [];\r\n  var offset = 8;\r\n\r\n  if (checkLeft === true) {\r\n    // top left corner\r\n    raysToLight.push(new Phaser.Line(this.playerSprite.left + offset,\r\n      this.playerSprite.top + offset,\r\n      lightImage.x,\r\n      lightImage.y));\r\n\r\n    // bottom left corner\r\n    raysToLight.push(new Phaser.Line(this.playerSprite.left + offset,\r\n      // this.playerSprite.bottom - offset,\r\n      this.playerSprite.bottom,\r\n      lightImage.x,\r\n      lightImage.y));\r\n  }\r\n\r\n  if (checkRight === true) {\r\n    // top right corner\r\n    raysToLight.push(new Phaser.Line(this.playerSprite.right - offset,\r\n      this.playerSprite.top + offset,\r\n      lightImage.x, lightImage.y));\r\n\r\n    // bottom right corner\r\n    raysToLight.push(new Phaser.Line(this.playerSprite.right - offset,\r\n      // this.playerSprite.bottom - offset,\r\n      this.playerSprite.bottom,\r\n      lightImage.x, lightImage.y));\r\n  }\r\n\r\n  if (BasicGame.Game.developmentMode === true) {\r\n    // [ development mode ]\r\n    this.drawLinesToLight(lightImage, raysToLight);\r\n  }\r\n\r\n  // Test if any walls intersect the ray\r\n  return this.allRaysIntersectWall(raysToLight);\r\n};\r\n\r\nBasicGame.Player.prototype.allRaysIntersectWall = function (rays) {\r\n  // check intersections for each ray\r\n  // (!) if at least one ray has no intersection with a wall, then the player isn't in shadow\r\n  var hiddenRays = 0;\r\n  rays.forEach(function (ray) {\r\n    var intersect = null;\r\n\r\n    //for each of the walls...\r\n    this.level.walls.forEach(function (wall) {\r\n      if (!intersect) {\r\n        // create an array of lines that represent the four edges of each wall\r\n        var lines = [\r\n          new Phaser.Line(wall.x, wall.y, wall.x + wall.width, wall.y),\r\n          new Phaser.Line(wall.x, wall.y, wall.x, wall.y + wall.height),\r\n          new Phaser.Line(wall.x + wall.width, wall.y, wall.x + wall.width, wall.y + wall.height),\r\n          new Phaser.Line(wall.x, wall.y + wall.height, wall.x + wall.width, wall.y + wall.height)\r\n        ];\r\n\r\n        // test each of the edges in the wall against the ray from the player to the light\r\n        for (var i = 0; i < lines.length; i++) {\r\n          intersect = Phaser.Line.intersects(ray, lines[i]);\r\n          if (intersect) {\r\n            // if there is an intersect, the wall must be in the way\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }, this);\r\n\r\n    if (intersect) {\r\n      // this edge is hidden. :D\r\n      hiddenRays++;\r\n    }\r\n  }, this);\r\n\r\n  return (hiddenRays === rays.length);\r\n};\r\n\r\nBasicGame.Player.prototype.drawLinesToLight = function (lightImage, raysToLight) {\r\n  // draw a line from the light to the targets\r\n  for (var i = 0; i < raysToLight.length; i++) {\r\n    this.bitmap.context.beginPath();\r\n    this.bitmap.context.moveTo(raysToLight[i].start.x, raysToLight[i].start.y);\r\n    this.bitmap.context.lineTo(lightImage.x, lightImage.y);\r\n    this.bitmap.context.stroke();\r\n  }\r\n};\r\n\r\nBasicGame.Player.prototype.updateLevel = function (level) {\r\n  this.collectedPieces = 0;\r\n  this.playerSprite.body.reset(this.playerSprite.x, this.playerSprite.y);\r\n  this.playerSprite.body.enable = false;\r\n  this.level = level;\r\n  this.justLeaveGround = false;\r\n  this.slideSound.stop();\r\n  this.enableBody();\r\n  this.setPlayerPositionInLevel();\r\n  this.dead = false;\r\n  this.dialogueFadeOutStarted = false;\r\n};\r\n\r\nBasicGame.Player.prototype.explote = function () {\r\n  var timer;\r\n\r\n  this.dead = true;\r\n\r\n  // stop sounds\r\n  this.slideSound.stop();\r\n  this.jumpSound.stop();\r\n  this.walkSound.stop();\r\n  this.fallSound.stop();\r\n\r\n  this.playerSprite.body.enable = false;\r\n  this.playerSprite.body.acceleration.x = 0;\r\n  this.playerSprite.body.velocity.y = 0;\r\n  this.playerSprite.body.allowGravity = false;\r\n\r\n  timer = this.game.time.create(true);\r\n  timer.add(100, function () {\r\n    this.deathSound.play();\r\n  }, this);\r\n  timer.start();\r\n\r\n  this.playerSprite.alpha = 0;\r\n\r\n  this.particlesGroup.x = this.playerSprite.x;\r\n  this.particlesGroup.y = this.playerSprite.y;\r\n\r\n  this.particlesGroup.forEach(function (particle) {\r\n    particle.x = particle.originalX;\r\n    particle.y = particle.originalY;\r\n    particle.body.allowGravity = true;\r\n    particle.body.velocity.y = -50 * this.gameObj.helper.randomNumber(10, 20);\r\n    if (this.gameObj.helper.randomNumber(1, 10) > 5) {\r\n      particle.body.acceleration.x = -this.gameObj.helper.randomNumber(100, 200);\r\n    }\r\n    else {\r\n      particle.body.acceleration.x = this.gameObj.helper.randomNumber(100, 200);\r\n    }\r\n  }, this);\r\n};\r\n\r\nBasicGame.Player.prototype.restartLevel = function (hideDarknessDelay) {\r\n  this.collectedPieces = 0;\r\n  this.walkSound.stop();\r\n  this.slideSound.stop();\r\n  this.setPlayerPositionInLevel();\r\n  // this.game.time\r\n  //   .create(true)\r\n  //   .add(hideDarknessDelay || 100, function () {\r\n  //     this.enableBody();\r\n  //   }, this)\r\n  //   .timer.start();\r\n  this.dead = false;\r\n};\r\n\r\nBasicGame.Player.prototype.gameInDarkness = function () {\r\n  this.playerSprite.alpha = 1;\r\n};\r\n\r\nBasicGame.Player.prototype.placeDialogueGroup = function () {\r\n  if (this.flipDialogueH === true) {\r\n    this.dialogueGroup.x = this.playerSprite.centerX - this.dialogueGroup.width + 16;\r\n  }\r\n  else {\r\n    this.dialogueGroup.x = this.playerSprite.centerX;\r\n  }\r\n\r\n  if (this.flipDialogueV === true) {\r\n    this.dialogueGroup.y = this.playerSprite.bottom + 6.8;\r\n  }\r\n  else {\r\n    this.dialogueGroup.y = this.playerSprite.top - 6.8 - this.dialogueGroup.height;\r\n  }\r\n};\r\n\r\nBasicGame.Player.prototype.showDialogue = function (immediateHide) {\r\n  var dayObj = this.gameObj.days.getDay(BasicGame.currentLevel);\r\n  var displayTween = null;\r\n  var dialogueHeight = 0;\r\n\r\n  if (dayObj.text) {\r\n    this.waitTime = (immediateHide === true) ? 100 : dayObj.waitTime * 1000;\r\n    this.dialogueText.text = dayObj.text[BasicGame.language];\r\n    this.dialogueBackground.height = this.dialogueText.textHeight + this.DIALOGUE_TEXT_V_PADDING * 2;\r\n    this.dialogueMark.y = this.dialogueBackground.height + 8;\r\n    dialogueHeight = this.dialogueBackground.height + 8 + this.dialogueMarkHeight;\r\n    this.game.world.bringToTop(this.dialogueGroup);\r\n\r\n    if (this.DIALOGUE_WIDTH + this.playerSprite.centerX > this.game.width) {\r\n      this.flipDialogueH = true;\r\n      this.dialogueMark.x = this.DIALOGUE_WIDTH - 18;\r\n    }\r\n    else {\r\n      this.flipDialogueH = false;\r\n      this.dialogueMark.x = 0;\r\n    }\r\n\r\n    if (this.playerSprite.top - 6.8 - dialogueHeight <= 0) {\r\n      this.flipDialogueV = true;\r\n      this.dialogueMark.scale.set((this.flipDialogueH === true) ? -1 : 1, -1);\r\n      this.dialogueMark.bottom = 0;\r\n      this.dialogueBackground.top = this.dialogueMark.y + 8;\r\n      this.dialogueText.top = this.dialogueBackground.top + this.DIALOGUE_TEXT_V_PADDING;\r\n      this.dialogueGroup.y = this.playerSprite.bottom + 6.8;\r\n    }\r\n    else {\r\n      this.flipDialogueV = false;\r\n      this.dialogueMark.scale.set((this.flipDialogueH === true) ? -1 : 1, 1);\r\n      this.dialogueBackground.y = 0;\r\n      this.dialogueText.y = this.DIALOGUE_TEXT_V_PADDING;\r\n      this.dialogueMark.y = this.dialogueBackground.height + 8;\r\n      this.dialogueGroup.y = this.playerSprite.top - dialogueHeight - 6.8;\r\n    }\r\n\r\n    this.dialogueGroup.alpha = 0;\r\n    this.dialogueGroup.width = 0;\r\n    this.dialogueGroup.height = 0;\r\n    displayTween = this.game.add.tween(this.dialogueGroup);\r\n    displayTween.to({\r\n      alpha: 1,\r\n      width: this.DIALOGUE_WIDTH,\r\n      height: dialogueHeight\r\n    }, this.FADE_SPEED, Phaser.Easing.Exponential.Out);\r\n    displayTween.onComplete.add(function () {\r\n      this.dialogueDisplayed = true;\r\n    }, this);\r\n    displayTween.start();\r\n  }\r\n};\r\n\r\nBasicGame.Player.prototype.hideDialogue = function (delay) {\r\n  var displayTween = this.game.add.tween(this.dialogueGroup);\r\n  displayTween.to({\r\n    alpha: 0\r\n  }, this.FADE_SPEED, Phaser.Easing.Cubic.Out, false, delay);\r\n  displayTween.onComplete.add(function () {\r\n    this.dialogueDisplayed = false;\r\n    this.dialogueFadeOutStarted = false;\r\n    this.dialogueGroup.width = 0;\r\n    this.dialogueGroup.height = 0;\r\n  }, this);\r\n  displayTween.start();\r\n};\r\n\r\nBasicGame.Player.prototype.enableBody = function () {\r\n  this.playerSprite.body.enable = true;\r\n  this.playerSprite.body.allowGravity = true;\r\n};\r\n\r\nBasicGame.Player.prototype.setPlayerPositionInLevel = function () {\r\n  this.playerSprite.position.set(this.level.initPlayerPos.x + this.HALF_SIZE,\r\n    this.level.initPlayerPos.y + this.BASE_SIZE);\r\n  this.playerSprite.body.reset(this.playerSprite.x, this.playerSprite.y);\r\n};\r\n",
    "var BasicGame = require('BasicGame');\r\nwindow.onload = function () {\r\n    //Create your Phaser game and inject it into the gameContainer div.\r\n    //We did it in a window.onload event, but you can do it anywhere (requireJS load, anonymous function, jQuery dom ready, - whatever floats your boat)\r\n    var game = new Phaser.Game(1024, 640, Phaser.CANVAS, 'gameContainer');\r\n\r\n    //Add the States your game has.\r\n    //You don't have to do this in the html, it could be done in your Boot state too, but for simplicity I'll keep it here.\r\n    game.state.add('Boot', BasicGame.Boot);\r\n    game.state.add('Preloader', BasicGame.Preloader);\r\n    game.state.add('MainMenu', BasicGame.MainMenu);\r\n    game.state.add('Game', BasicGame.Game);\r\n    game.state.add('TheEnd', BasicGame.TheEnd);\r\n\r\n    //Now start the Boot state.\r\n    game.state.start('Boot');\r\n};",
    "var BasicGame = require('BasicGame');\r\n\r\nBasicGame.Boot = function (game) {\r\n};\r\n\r\nBasicGame.Boot.prototype.preload = function () {\r\n  //  Here we load the assets required for our preloader (in this case a background and a loading bar)\r\n  this.load.image('preloaderBackground', 'assets/sprites/preloader_background.png');\r\n  this.load.image('preloaderBar', 'assets/sprites/preloader_bar.png');\r\n\r\n  // Add the plugin for debugging\r\n  // this.game.add.plugin(Phaser.Plugin.Debug);\r\n};\r\n\r\nBasicGame.Boot.prototype.create = function () {\r\n  //  Unless you specifically know your game needs to support multi-touch I would recommend setting this to 1\r\n  this.input.maxPointers = 1;\r\n\r\n  //  Phaser will automatically pause if the browser tab the game is in loses focus. You can disable that here:\r\n  // this.stage.disableVisibilityChange = true;\r\n\r\n  //If the parent container of the game is the browser window (ie. document.body), rather than a div, this should set to true.\r\n  this.scale.parentIsWindow = true;\r\n\r\n  // this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;\r\n\r\n  if (this.game.device.desktop) {\r\n    //  If you have any desktop specific settings, they can go in here\r\n    this.scale.pageAlignHorizontally = true;\r\n    this.scale.pageAlignVertically = true;\r\n  } else {\r\n    //  Same goes for mobile settings.\r\n    //  In this case we're saying \"scale the game, no lower than 480x260 and no higher than 1024x768\"\r\n    this.scale.setMinMax(480, 260, 1024, 640);\r\n    this.scale.forceLandscape = true;\r\n    this.scale.pageAlignHorizontally = true;\r\n    this.scale.pageAlignVertically = true;\r\n    this.scale.setScreenSize(true);\r\n    this.scale.refresh();\r\n  }\r\n\r\n  // this.scale.setScreenSize(false);\r\n};\r\n\r\nBasicGame.Boot.prototype.update = function () {\r\n  //  By this point the preloader assets have loaded to the cache, we've set the game settings\r\n  //  So now let's start the real preloader going\r\n  if (localStorage.getItem(\"oh-my-blob\")) {\r\n    BasicGame.readCode(localStorage.getItem(\"oh-my-blob\"));\r\n  }\r\n  this.state.start('Preloader');\r\n};",
    "var BasicGame = require('BasicGame');\r\n\r\nBasicGame.Game = function (game) {\r\n  // constants\r\n  this.LIFES_AMOUNT = 3;\r\n  this.FADE_DURATION = 700;\r\n  this.KEY_PAUSE = Phaser.Keyboard.P;\r\n  this.KEY_MUTE = Phaser.Keyboard.M;\r\n  this.KEY_CHAT = Phaser.Keyboard.C;\r\n  this.DARKNESS_ALPHA = 1;\r\n  this.GO_TO_NEXT_LEVEL_DELAY = 1500;\r\n  this.PAUSE_WIDTH = 660; // Illustrator\r\n  this.PAUSE_HEIGHT = 470; // Illustrator\r\n\r\n  // destroyable objects (sprites, sounds, groups, tweens...)\r\n  this.background = null;\r\n  this.lifesGroup = null;\r\n  this.flashGroup = null;\r\n  this.darknessGroup = null;\r\n  this.music = null;\r\n  this.putDarkTween = null;\r\n  this.removeDarkTween = null;\r\n  this.noiseImage = null;\r\n  this.savingText = null;\r\n  this.uiGroup = null;\r\n  this.pauseGroup = null;\r\n\r\n  // references to other classes\r\n  this.days = null;\r\n  this.player = null;\r\n  this.level = null;\r\n  this.light = null;\r\n  this.eye = null;\r\n  this.lightning = null;\r\n  this.helper = null;\r\n\r\n  // global properties\r\n  this.showFPS = null;\r\n  this.map = null;\r\n  this.inDarkness = null;\r\n  this.isLoadingLevel = null;\r\n  this.lifes = null;\r\n  this.pausedOn = 0;\r\n  this.mutedOn = 0;\r\n  this.checkMKey = true;\r\n  this.checkCKey = true;\r\n  this.changingLevel = false;\r\n  this.fontId = 'font';\r\n  this.savingMsg = {\r\n    \"es\": \"Guardando progreso...\",\r\n    \"en\": \"Saving progress...\"\r\n  };\r\n  this.levelCompleted = null;\r\n};\r\n\r\nBasicGame.Game.developmentMode = false;\r\nBasicGame.isRetrying = false;\r\nBasicGame.ignoreSave = false;\r\n\r\n// ╔══════════════════════════════════════════════════════════════════════════╗\r\n// ║ PHASER STATE METHODS                                                     ║\r\nBasicGame.Game.prototype.preload = function () {\r\n  // create the days object\r\n  this.days = new BasicGame.Days();\r\n  this.game.physics.startSystem(Phaser.Physics.ARCADE);\r\n  // define the size of the world\r\n  this.game.world.setBounds(0, 0, this.game.width, this.game.height);\r\n  // init the level\r\n  this.level = new BasicGame.Level(this.game, this);\r\n  // init the player\r\n  this.player = new BasicGame.Player(this.game, this.input, this);\r\n  // init a light\r\n  this.light = new BasicGame.Light(this.game, this);\r\n  BasicGame.light = this.light;\r\n  // init the EYE\r\n  this.eye = new BasicGame.Eye(this.game, this);\r\n  // init the lightning\r\n  this.lightning = new BasicGame.Lightning(this.game, this);\r\n  // init the helper\r\n  this.helper = new BasicGame.Helper(this.game, this);\r\n};\r\n\r\nBasicGame.Game.prototype.create = function () {\r\n  var darknessBitmap = null;\r\n  var darknessSprite = null;\r\n  var flashBitmap = null;\r\n  var flashSprite = null;\r\n\r\n  // ═════════════════════════════════════════════\r\n  // define game properties and setup game objects\r\n  this.lifes = this.LIFES_AMOUNT;\r\n  this.showFPS = false;\r\n  this.inDarkness = true;\r\n  this.levelCompleted = false;\r\n\r\n  // set stage background\r\n  this.background = this.game.add.image(0, 0, this.getSkyName());\r\n  this.background.width = this.game.world.width;\r\n  this.background.height = this.game.world.height;\r\n\r\n  this.noiseImage = this.game.add.image(0, 0, 'noise');\r\n  this.noiseImage.alpha = .5;\r\n\r\n  this.savingText = this.game.add.bitmapText(this.game.world.width / 2,\r\n    this.game.world.height / 2,\r\n    this.fontId,\r\n    this.savingMsg[BasicGame.language],\r\n    18);\r\n  this.savingText.anchor.set(0.5, 0.5);\r\n  this.savingText.align = \"center\";\r\n  this.savingText.tint = 0xfafafa;\r\n  this.savingText.alpha = 0;\r\n\r\n  // configure the camera for shaking\r\n  this.game.camera.setSize(this.game.world.width / 2, this.game.world.height / 2);\r\n  this.game.camera.setPosition(0, 0);\r\n\r\n  // add the music\r\n  if (!this.music) {\r\n    this.music = this.game.add.sound('level_music', 0.1, true);\r\n  }\r\n\r\n  this.game.input.keyboard.addKeyCapture([\r\n    this.KEY_PAUSE,\r\n    this.KEY_MUTE,\r\n    this.KEY_CHAT\r\n  ]);\r\n\r\n  // ═══════════════════\r\n  // create the UI group\r\n  this.createUIGroup();\r\n\r\n  // ═══════════════════\r\n  // create the Pause group\r\n  this.createPauseGroup();\r\n\r\n  // ═══════════════════\r\n  // create the darkness\r\n  this.darknessGroup = this.add.group();\r\n  darknessBitmap = new Phaser.BitmapData(this.game,\r\n    'darkness',\r\n    this.game.width,\r\n    this.game.height);\r\n  darknessBitmap.ctx.rect(0, 0, this.game.width, this.game.height);\r\n  darknessBitmap.ctx.fillStyle = '#212121';\r\n  darknessBitmap.ctx.fill();\r\n  darknessSprite = new Phaser.Sprite(this.game, 0, 0, darknessBitmap);\r\n  this.darknessGroup.addChild(darknessSprite);\r\n\r\n  // create the darkness tween\r\n  this.putDarkTween = this.game.add.tween(this.darknessGroup.getChildAt(0));\r\n  this.putDarkTween.to({ alpha: this.DARKNESS_ALPHA }, this.FADE_DURATION, Phaser.Easing.Quadratic.Out, false);\r\n  this.putDarkTween.onComplete.add(this.putDarkTweenCompleted, this);\r\n\r\n  // create the brightness tween\r\n  this.removeDarkTween = this.game.add.tween(this.darknessGroup.getChildAt(0));\r\n  this.removeDarkTween.to({ alpha: 0 }, 700, null, false);\r\n  this.removeDarkTween.onComplete.add(this.removeDarkTweenCompleted, this);\r\n\r\n  // create flash sprite\r\n  this.flashGroup = this.add.group();\r\n  flashBitmap = new Phaser.BitmapData(this.game,\r\n    'flash',\r\n    this.game.width,\r\n    this.game.height);\r\n  flashBitmap.ctx.rect(0, 0, this.game.width, this.game.height);\r\n  flashBitmap.ctx.fillStyle = '#fff';\r\n  flashBitmap.ctx.fill();\r\n  flashSprite = new Phaser.Sprite(this.game, 0, 0, flashBitmap);\r\n  flashSprite.alpha = 0;\r\n  this.flashGroup.addChild(flashSprite);\r\n\r\n  // ════════════════\r\n  // create the level\r\n  this.level.create();\r\n\r\n  // create the player\r\n  this.player.create(this.level);\r\n\r\n  // create the group of sprites for lifes\r\n  this.lifesGroup = this.game.add.group();\r\n  this.createLifeIndicators();\r\n  this.lifesGroup.x = 16;\r\n  this.lifesGroup.y = 16;\r\n\r\n  // create the light\r\n  this.light.create(this.level);\r\n\r\n  // create THE EYE\r\n  this.eye.create(this.player, this.level, this.lightning);\r\n\r\n  // ═════════════════════════════════════════════════\r\n  // bring to top some things so the game looks better\r\n  this.arrangeRenderLayers();\r\n\r\n  BasicGame.changeHTMLBackground(this.helper.getSkyColor(BasicGame.currentLevel));\r\n\r\n  // show FPS\r\n  if (BasicGame.Game.developmentMode) {\r\n    this.game.time.advancedTiming = true;\r\n    this.fpsText = this.game.add.text(this.game.world.width / 2 - 80, 100, '', { font: '80px Arial', fill: '#fefefe' });\r\n  }\r\n};\r\n\r\nBasicGame.Game.prototype.update = function () {\r\n  // update the light\r\n  this.light.update();\r\n\r\n  // update The Player\r\n  this.player.update(this.light);\r\n\r\n  // update The Eye\r\n  this.eye.update();\r\n\r\n  // update the lightning\r\n  this.lightning.update();\r\n\r\n  if (this.showingDarkness === true) {\r\n    return;\r\n  }\r\n\r\n  if (this.inputIsActive(this.KEY_PAUSE) === true) {\r\n    this.pausedOn = this.game.time.now;\r\n    this.pauseGame();\r\n  }\r\n\r\n  if (this.game.time.now - this.mutedOn >= 100) {\r\n    this.checkMKey = true;\r\n  }\r\n\r\n  if (this.checkMKey && this.inputIsActive(this.KEY_MUTE) === true) {\r\n    this.mutedOn = this.game.time.now;\r\n    this.checkMKey = false;\r\n    this.muteGame();\r\n  }\r\n\r\n  if (this.checkCKey === false && this.player.dialogueGroup.alpha === 0) {\r\n    this.checkCKey = true;\r\n  }\r\n\r\n  if (this.checkCKey && this.inputIsActive(this.KEY_CHAT) === true) {\r\n    this.checkCKey = false;\r\n    this.showPlayerDialogue(true);\r\n  }\r\n\r\n  // show development information\r\n  if (BasicGame.Game.developmentMode) {\r\n    if (this.game.time.fps !== 0) {\r\n      this.fpsText.setText(this.game.time.fps + ' FPS');\r\n    }\r\n  }\r\n};\r\n\r\nBasicGame.Game.prototype.render = function () {\r\n  this.player.render();\r\n  this.level.render();\r\n};\r\n\r\nBasicGame.Game.prototype.pauseUpdate = function () {\r\n  if ((this.game.time.now - this.pausedOn >= 100) && this.inputIsActive(this.KEY_PAUSE) === true) {\r\n    this.pauseGame();\r\n    this.pausedOn = 0;\r\n  }\r\n};\r\n\r\n/**\r\n * This method will be called when the State is shutdown (i.e. you switch to another state from this one).\r\n */\r\nBasicGame.Game.prototype.shutdown = function () {\r\n  // stop music, delete sprites, purge caches, free resources, all that good stuff.\r\n  // destroy sprites\r\n  this.background.destroy();\r\n  this.noiseImage.destroy();\r\n  // destroy groups\r\n  this.lifesGroup.destroy();\r\n  this.flashGroup.destroy();\r\n  this.darknessGroup.destroy();\r\n  // destroy sounds\r\n  this.music.destroy();\r\n  // destroy tweens\r\n  this.putDarkTween.stop();\r\n  this.removeDarkTween.stop();\r\n  // call the methods that will destroy everything in other classes\r\n  this.player.shutdown();\r\n  this.level.shutdown();\r\n  this.light.shutdown();\r\n  this.eye.shutdown();\r\n  this.lightning.shutdown();\r\n};\r\n// ║                                                                           ║\r\n// ╚═══════════════════════════════════════════════════════════════════════════╝\r\n\r\nBasicGame.Game.prototype.createUIGroup = function () {\r\n  this.uiGroup = this.game.add.group();\r\n\r\n  this.chatImage = this.game.add.button(0, 0, 'chat', function () {\r\n    this.showPlayerDialogue(true);\r\n  }, this, null, null, null, null, this.uiGroup);\r\n\r\n  this.muteButton = this.game.add.button(this.chatImage.right + 10, 0, 'mute',\r\n    this.muteGame, this, null, null, null, null, this.uiGroup);\r\n\r\n  this.pauseButton = this.game.add.button(this.muteButton.right + 10, 0, 'pause',\r\n    this.pauseGame, this, null, null, null, null, this.uiGroup);\r\n\r\n  this.uiGroup.x = this.game.world.width - this.uiGroup.width - 16;\r\n  this.uiGroup.y = 16;\r\n};\r\n\r\nBasicGame.Game.prototype.createPauseGroup = function () {\r\n  var pauseBackgroundImage = null;\r\n  var textImage = null;\r\n  var center = { x: this.game.world.width / 2, y: this.game.world.height / 2 };\r\n\r\n  this.pauseGroup = this.game.add.group();\r\n\r\n  pauseBackgroundImage = this.game.add.image(center.x, center.y, 'credits_background');\r\n  pauseBackgroundImage.width = this.PAUSE_WIDTH;\r\n  pauseBackgroundImage.height = this.PAUSE_HEIGHT;\r\n  pauseBackgroundImage.anchor.set(0.5, 0.5);\r\n\r\n  textImage = this.game.add.image(center.x, center.y, 'pause_' + BasicGame.language);\r\n  textImage.anchor.set(0.5, 0.5);\r\n\r\n  this.pauseGroup.addChild(pauseBackgroundImage);\r\n  this.pauseGroup.addChild(textImage);\r\n\r\n  this.pauseGroup.alpha = 0;\r\n};\r\n\r\nBasicGame.Game.prototype.arrangeRenderLayers = function () {\r\n  if (this.level.spikes) {\r\n    this.game.world.bringToTop(this.level.spikes);\r\n  }\r\n  this.game.world.bringToTop(this.level.walls);\r\n  this.game.world.bringToTop(this.noiseImage);\r\n  this.game.world.bringToTop(this.eye.viewZone);\r\n  this.game.world.bringToTop(this.light.lightBitmap);\r\n  this.game.world.bringToTop(this.level.pieces);\r\n  this.game.world.bringToTop(this.lifesGroup);\r\n  this.game.world.bringToTop(this.player.dialogueGroup);\r\n  this.game.world.bringToTop(this.uiGroup);\r\n  this.game.world.bringToTop(this.darknessGroup);\r\n};\r\n\r\nBasicGame.Game.prototype.inputIsActive = function (key) {\r\n  return this.game.input.keyboard.isDown(key);\r\n};\r\n\r\nBasicGame.Game.prototype.levelEnded = function () {\r\n  this.levelCompleted = true;\r\n  BasicGame.isRetrying = false;\r\n  this.showDarkness();\r\n};\r\n\r\nBasicGame.Game.prototype.loadLevel = function (levelNumber) {\r\n  this.saveGame(BasicGame.setDay(levelNumber));\r\n\r\n  if (levelNumber > 30) {\r\n    // congrats, you ended the game\r\n    this.state.start('TheEnd');\r\n    return;\r\n  }\r\n\r\n  this.level.destroyCurrentLevel();\r\n\r\n  var skyName = this.getSkyName();\r\n  if (this.background.key != skyName) {\r\n    this.load.image(skyName, 'assets/sprites/' + skyName + '.png');\r\n  }\r\n\r\n  this.game.load.onLoadComplete.addOnce(function () {\r\n    if (this.background.key != skyName) {\r\n      this.background.loadTexture(skyName);\r\n    }\r\n    this.savingText.alpha = 0;\r\n    this.level.createLevel(levelNumber);\r\n  }, this);\r\n\r\n  var levelData = this.helper.getLevelIdAndName(levelNumber);\r\n  this.game.load.tilemap(levelData.id,\r\n    'assets/levels/' + levelData.name + '.json',\r\n    null,\r\n    Phaser.Tilemap.TILED_JSON);\r\n\r\n  this.game.load.start();\r\n};\r\n\r\nBasicGame.Game.prototype.levelReady = function () {\r\n  if (this.isLoadingLevel === true) {\r\n    this.player.updateLevel(this.level);\r\n    this.light.updateWalls(this.level);\r\n    this.eye.updateLevel(this.level);\r\n    this.lightning.updateLevel(this.level);\r\n    this.arrangeRenderLayers();\r\n  }\r\n\r\n  this.levelCompleted = false;\r\n  this.hideDarkness();\r\n};\r\n\r\nBasicGame.Game.prototype.shakeCamera = function () {\r\n  var shakeTween;\r\n\r\n  // shake the camera by moving it up and down 5 times really fast\r\n  this.game.camera.y = 10;\r\n  this.game.camera.x = 10;\r\n\r\n  // create the tween for shaking the camera\r\n  shakeTween = this.game.add.tween(this.game.camera);\r\n  shakeTween.to({ y: -5, x: -5 },\r\n    40,\r\n    Phaser.Easing.Sinusoidal.InOut,\r\n    false,\r\n    0,\r\n    4,\r\n    true);\r\n\r\n  shakeTween.onComplete.add(function () {\r\n    // set the camera position to its initial position\r\n    this.game.camera.setPosition(0, 0);\r\n  }, this);\r\n\r\n  shakeTween.start();\r\n};\r\n\r\nBasicGame.Game.prototype.subtractLife = function () {\r\n  var that = this;\r\n\r\n  // if the player collected all the pieces, don't kill him\r\n  if (this.levelCompleted === true) {\r\n    return;\r\n  }\r\n\r\n  // remove one life sprite\r\n  if (this.lifes <= 0) {\r\n    return;\r\n  }\r\n\r\n  var lifeTween = this.game.add.tween(this.lifesGroup.getChildAt(--this.lifes));\r\n  lifeTween.to({ alpha: 0 },\r\n    300,\r\n    Phaser.Easing.Quadratic.Out,\r\n    true);\r\n\r\n  // create the tween for flashing the camera\r\n  var flashTween = this.game.add.tween(this.flashGroup.getChildAt(0));\r\n  flashTween.to({ alpha: 1 },\r\n    40,\r\n    Phaser.Easing.Sinusoidal.InOut,\r\n    false,\r\n    0,\r\n    4,\r\n    true);\r\n  flashTween.start();\r\n\r\n  if (this.lifes <= 0) {\r\n    // save the current level\r\n    this.saveGame(BasicGame.addDeath());\r\n\r\n    // notify the PLAYER that its time to show the animation for dead\r\n    this.player.explote();\r\n\r\n    // notify to the EYE the player has died\r\n    this.eye.rejoice((function () {\r\n      this.showDarkness(200);\r\n    }).bind(this));\r\n  }\r\n};\r\n\r\nBasicGame.Game.prototype.subtractAllLifes = function (destroyPlayer) {\r\n  var lifeTween = null;\r\n\r\n  // if the player collected all the pieces, don't kill him\r\n  if (this.levelCompleted === true) {\r\n    return;\r\n  }\r\n\r\n  this.saveGame(BasicGame.addDeath());\r\n  this.lifes = 0;\r\n\r\n  lifeTween = this.game.add.tween(this.lifesGroup);\r\n  lifeTween.to({ alpha: 0 },\r\n    180,\r\n    Phaser.Easing.Quadratic.Out,\r\n    true);\r\n\r\n  // this.eye.levelEndedEvent(false);\r\n\r\n  if (destroyPlayer) {\r\n    // play the animation of death of the player\r\n    this.player.explote();\r\n\r\n    // create the timer to give the player die animation time to be played\r\n    this.helper.timer(1000,\r\n      function () {\r\n        this.showDarkness(200);\r\n      },\r\n      this);\r\n  } else {\r\n    this.showDarkness(200);\r\n  }\r\n};\r\n\r\nBasicGame.Game.prototype.showDarkness = function (durationInMS) {\r\n  this.showingDarkness = true;\r\n  this.game.world.bringToTop(this.darknessGroup);\r\n  this.putDarkTween.updateTweenData(\"duration\", durationInMS || this.FADE_DURATION);\r\n  this.putDarkTween.start();\r\n\r\n  this.chatImage.input.enabled = false;\r\n  this.muteButton.input.enabled = false;\r\n  this.pauseButton.input.enabled = false;\r\n};\r\n\r\nBasicGame.Game.prototype.putDarkTweenCompleted = function () {\r\n  this.inDarkness = true;\r\n\r\n  this.eye.gameInDarkness();\r\n  this.player.gameInDarkness();\r\n\r\n  this.showLifes();\r\n\r\n  if (this.levelCompleted === true) {\r\n    // show the Progress saved message\r\n    this.savingText.alpha = 1;\r\n    this.game.world.bringToTop(this.savingText);\r\n\r\n    this.helper.timer(this.GO_TO_NEXT_LEVEL_DELAY, function () {\r\n      // set the flag for loading level\r\n      this.isLoadingLevel = true;\r\n\r\n      // notify to the eye that the level was ended\r\n      this.eye.levelEndedEvent(true);\r\n      this.loadLevel(++BasicGame.currentLevel);\r\n    }, this);\r\n  }\r\n  else if (this.lifes <= 0) {\r\n    this.restartLevel(true);\r\n  }\r\n};\r\n\r\nBasicGame.Game.prototype.hideDarkness = function (durationInMS) {\r\n  this.inDarkness = false;\r\n  this.showingDarkness = false;\r\n  this.removeDarkTween.updateTweenData(\"duration\", durationInMS || this.FADE_DURATION);\r\n  this.removeDarkTween.start();\r\n\r\n  this.chatImage.input.enabled = true;\r\n  this.muteButton.input.enabled = true;\r\n  this.pauseButton.input.enabled = true;\r\n};\r\n\r\nBasicGame.Game.prototype.removeDarkTweenCompleted = function () {\r\n  this.isLoadingLevel = false;\r\n\r\n  if (BasicGame.isRetrying === false) {\r\n    // make the player say a line\r\n    this.showPlayerDialogue();\r\n  }\r\n\r\n  this.lifes = this.LIFES_AMOUNT;\r\n\r\n  // make the EYE seek for the player\r\n\r\n  if (this.music.isPlaying === false) {\r\n    this.music.play();\r\n  }\r\n\r\n  this.player.enableBody();\r\n  this.eye.levelStart(BasicGame.isRetrying);\r\n};\r\n\r\nBasicGame.Game.prototype.restartLevel = function (runHideDarkness) {\r\n  // restore the alpha for life indicators and lifes' group\r\n  BasicGame.isRetrying = true;\r\n  this.lifes = this.LIFES_AMOUNT;\r\n  this.showLifes();\r\n\r\n  this.player.restartLevel(runHideDarkness);\r\n  this.level.restartLevel(runHideDarkness);\r\n  this.eye.restartLevel(runHideDarkness);\r\n\r\n  if (runHideDarkness === true) {\r\n    this.hideDarkness(200);\r\n  }\r\n};\r\n\r\nBasicGame.Game.prototype.createLifeIndicators = function () {\r\n  for (var i = 0; i < this.lifes; i++) {\r\n    var lifeSprite = new Phaser.Sprite(this.game, 0, 0, \"life\");\r\n    // lifeSprite.scale.set(0.5, 0.8);\r\n    lifeSprite.x = (i % 3) * (lifeSprite.width + 6);\r\n\r\n    this.lifesGroup.addChild(lifeSprite);\r\n  }\r\n};\r\n\r\nBasicGame.Game.prototype.showLifes = function () {\r\n  this.lifesGroup.alpha = 1;\r\n  this.lifesGroup.forEach(function (lifeSprite) {\r\n    lifeSprite.alpha = 1;\r\n  });\r\n};\r\n\r\nBasicGame.Game.prototype.getSkyName = function () {\r\n  return this.helper.getSkyName(BasicGame.currentLevel);\r\n};\r\n\r\nBasicGame.Game.prototype.saveGame = function (data) {\r\n  if (BasicGame.Game.developmentMode === true || BasicGame.ignoreSave === true) {\r\n    return;\r\n  }\r\n\r\n  localStorage.setItem(\"oh-my-blob\", data);\r\n};\r\n\r\nBasicGame.Game.prototype.showPlayerDialogue = function (immediateHide) {\r\n  this.player.showDialogue(immediateHide);\r\n};\r\n\r\nBasicGame.Game.prototype.muteGame = function () {\r\n  this.game.sound.mute = !this.game.sound.mute;\r\n  this.muteButton.frame = (this.game.sound.mute === true) ? 1 : 0;\r\n};\r\n\r\nBasicGame.Game.prototype.pauseGame = function () {\r\n  this.game.paused = !this.game.paused;\r\n  this.pauseButton.frame = 0;\r\n  this.darknessGroup.getChildAt(0).alpha = 0;\r\n  this.pauseGroup.alpha = 0;\r\n\r\n  if (this.game.paused === true) {\r\n    this.pauseButton.frame = 1;\r\n    this.pauseGroup.alpha = 1;\r\n    this.game.world.bringToTop(this.pauseGroup);\r\n  }\r\n};\r\n\r\n\r\n// ╔═══════════════════════════════════════════════════════════════════════════╗\r\nBasicGame.Game.prototype.quitGame = function () {\r\n  this.shutdown();\r\n};\r\n// ╚═══════════════════════════════════════════════════════════════════════════╝",
    "var BasicGame = require('BasicGame');\r\n\r\nBasicGame.MainMenu = function (game) {\r\n  // constants\r\n  this.BUTTON_WIDTH = 180;\r\n  this.BUTTON_HEIGHT = 38;\r\n  this.BUTTON_VSPACING = 15;\r\n  this.BUTTON_HSPACING = 12;\r\n  this.SCREEN_PADDING = 32;\r\n  this.BUTTON_PADDING = 16;\r\n  this.FONT_REGULAR = 'font';\r\n  this.FONT_MEDIUM = 'font-medium';\r\n  this.CONTINUE_MSG = {\r\n    'es': 'Continuar',\r\n    'en': 'Continue'\r\n  };\r\n  this.NEWGAME_MSG = {\r\n    'es': 'Nuevo juego',\r\n    'en': 'New game'\r\n  };\r\n  this.CREDITS_MSG = {\r\n    'es': 'Créditos',\r\n    'en': 'Credits'\r\n  };\r\n  this.KEYS_DESCRIPTION_MSG = {\r\n    'es': 'usa A y D o IZQUIERA y DERECHA para moverte\\n' +\r\n      'usa W, Z, ESPACIO o ARRIBA para saltar\\n' +\r\n      'usa C para ver los diálogos, M para silencia y P para pausar\\n' +\r\n      'toma todas las píldoras para superar el día\\n' +\r\n      'la partida se guardará al inicio de cada nivel',\r\n    'en': 'use A and D or LEFT and RIGHT to move\\n' +\r\n      'use W, Z, SPACE or UP to jump\\n' +\r\n      'use C to show the dialogues, M to mute and P to pause\\n' +\r\n      'take all the pills to get over the day\\n' +\r\n      'you progress will be saved at the start of each level'\r\n  };\r\n  this.CONTINUE_DAY_MSG = {\r\n    'es': 'Día',\r\n    'en': 'Day'\r\n  };\r\n  this.SPANISH_LANG_MSG = {\r\n    'es': 'Español',\r\n    'en': 'Spanish'\r\n  };\r\n  this.ENGLISH_LANG_MSG = {\r\n    'es': 'Inglés',\r\n    'en': 'English'\r\n  };\r\n  this.END_SCENE_MSG = {\r\n    'es': 'Escena final',\r\n    'en': 'End scene'\r\n  };\r\n\r\n  // destroyable objects (sprites, sounds, groups, tweens...)\r\n  this.backgroundImage = null;\r\n  this.titleText = null;\r\n  this.giantPupilImage = null;\r\n  this.optionsGroup = null;\r\n  this.languageGroup = null;\r\n  this.keysDescriptionText = null;\r\n  this.continueDayText = null;\r\n  this.creditsGroup = null;\r\n  this.closeButton = null;\r\n  this.splashMusic = null;\r\n\r\n  // global properties\r\n  this.fakeEye = {\r\n    centerX: 512,\r\n    centerY: 321,\r\n    radius: 210\r\n  };\r\n  this.translatableTexts = [];\r\n  this.menuButtons = [];\r\n};\r\n\r\n// ╔══════════════════════════════════════════════════════════════════════════╗\r\n// ║ PHASER STATE METHODS                                                     ║\r\nBasicGame.MainMenu.prototype.create = function () {\r\n  var _self = this;\r\n\r\n  this.translatableTexts = [];\r\n  this.menuButtons = [];\r\n\r\n  // set the background\r\n  this.backgroundImage = this.game.add.image(0, 0, 'main_menu_background');\r\n  this.backgroundImage.width = this.game.world.width;\r\n  this.backgroundImage.height = this.game.world.height;\r\n\r\n  // add the pupil\r\n  this.giantPupilImage = this.game.add.image(this.game.world.width / 2,\r\n    this.game.world.height / 2,\r\n    'giant_pupil');\r\n  this.giantPupilImage.anchor.set(.5, .5);\r\n\r\n  // add the title\r\n  this.titleText = this.game.add.bitmapText(this.game.world.width / 2,\r\n    41,\r\n    this.FONT_MEDIUM,\r\n    'In the Shadows',\r\n    72);\r\n  this.titleText.anchor.set(0.5, 0);\r\n  this.titleText.align = 'center';\r\n  this.titleText.tint = 0x303c42;\r\n\r\n  // add the text for key inputs\r\n  this.keysDescriptionText = this.game.add.bitmapText(0, 0,\r\n    this.FONT_REGULAR,\r\n    this.KEYS_DESCRIPTION_MSG[BasicGame.language],\r\n    18);\r\n  this.keysDescriptionText.anchor.set(0.5, 0);\r\n  this.keysDescriptionText.align = 'center';\r\n  this.keysDescriptionText.tint = 0x303c42;\r\n  this.keysDescriptionText.x = this.game.world.width / 2;\r\n  this.keysDescriptionText.bottom = this.game.world.height - this.SCREEN_PADDING / 2;\r\n  this.keysDescriptionText.alpha = 0;\r\n\r\n  this.translatableTexts.push({\r\n    sourceMsg: this.KEYS_DESCRIPTION_MSG,\r\n    phaserObj: this.keysDescriptionText\r\n  });\r\n\r\n  // create the group for menu buttons\r\n  this.createOptionsGroup();\r\n\r\n  // create the group for language buttons\r\n  this.createLanguageGroup();\r\n\r\n  // create the assets for the credits\r\n  this.createCreditsGroup();\r\n  this.creditsGroup.alpha = 0;\r\n\r\n  // add the splash_music\r\n  this.splashMusic = this.game.add.sound('splash_music', 0.2, true);\r\n  this.splashMusic.onFadeComplete.addOnce(function (soundObj) {\r\n    soundObj.stop();\r\n  }, this);\r\n  this.splashMusic.play();\r\n\r\n  BasicGame.changeHTMLBackground(BasicGame.Helper.prototype.getSkyColor(BasicGame.currentLevel));\r\n};\r\n\r\nBasicGame.MainMenu.prototype.update = function () {\r\n  this.followPointer();\r\n};\r\n\r\n/**\r\n * This method will be called when the State is shutdown (i.e. you switch to another state from this one).\r\n */\r\nBasicGame.MainMenu.prototype.shutdown = function () {\r\n\r\n  // destroy sprites and images\r\n  this.backgroundImage.destroy();\r\n  this.titleText.destroy();\r\n  this.giantPupilImage.destroy();\r\n  this.keysDescriptionText.destroy();\r\n  // destroy groups\r\n  this.optionsGroup.destroy();\r\n  this.languageGroup.destroy();\r\n  this.creditsGroup.destroy();\r\n  // destroy audio\r\n  this.splashMusic.destroy();\r\n\r\n  this.translatableTexts = null;\r\n  this.menuButtons = null;\r\n  this.closeButton = null;\r\n};\r\n// ║                                                                           ║\r\n// ╚═══════════════════════════════════════════════════════════════════════════╝\r\n\r\nBasicGame.MainMenu.prototype.createOptionsGroup = function () {\r\n  this.optionsGroup = this.game.add.group();\r\n\r\n  if (BasicGame.currentLevel > 1) {\r\n    this.addOptionTo({\r\n      changeWidth: true,\r\n      msg: this.CONTINUE_MSG,\r\n      attachTextChangeCallback: true,\r\n      hSpace: 0,\r\n      vSpace: 1,\r\n      group: this.optionsGroup,\r\n      overCallback: (function () {\r\n        if (BasicGame.currentLevel <= 30) {\r\n          this.showKeysDescription(true);\r\n        }\r\n      }).bind(this),\r\n      outCallback: (function () {\r\n        if (BasicGame.currentLevel <= 30) {\r\n          this.showKeysDescription(false);\r\n        }\r\n      }).bind(this),\r\n      clickCallback: this.nextScene\r\n    });\r\n  }\r\n  this.addOptionTo({\r\n    changeWidth: true,\r\n    msg: this.NEWGAME_MSG,\r\n    attachTextChangeCallback: true,\r\n    hSpace: 0,\r\n    vSpace: 1,\r\n    group: this.optionsGroup,\r\n    overCallback: this.showKeysDescription.bind(this, true),\r\n    outCallback: this.showKeysDescription.bind(this, false),\r\n    clickCallback: this.newGame\r\n  });\r\n  this.addOptionTo({\r\n    changeWidth: true,\r\n    msg: this.CREDITS_MSG,\r\n    attachTextChangeCallback: true,\r\n    hSpace: 0,\r\n    vSpace: 1,\r\n    group: this.optionsGroup,\r\n    clickCallback: function (button, pointer, isOver) {\r\n      // invoke input out event on the button to retore its apperance to default\r\n      button.onInputOutHandler(button, pointer);\r\n      this.showCredits(true);\r\n    }\r\n  });\r\n\r\n  this.optionsGroup.right = this.game.world.width - this.SCREEN_PADDING;\r\n  this.optionsGroup.bottom = this.game.world.height - this.SCREEN_PADDING;\r\n\r\n  if (BasicGame.currentLevel > 1) {\r\n    // add a text to display the current day to load\r\n    this.continueDayText = this.game.add.bitmapText(this.optionsGroup.right,\r\n      this.optionsGroup.top - 10,\r\n      this.FONT_REGULAR,\r\n      this.getDayString(),\r\n      18);\r\n    this.continueDayText.anchor.set(1, 1);\r\n    this.continueDayText.alpha = 0;\r\n    this.continueDayText.tint = 0x303c42;\r\n    this.continueDayText.alpha = .8;\r\n\r\n    this.translatableTexts.push({\r\n      sourceMsg: this.CONTINUE_DAY_MSG,\r\n      phaserObj: this.continueDayText,\r\n      onChangeCallback: (function () {\r\n        this.continueDayText.text = this.getDayString();\r\n      }).bind(this)\r\n    });\r\n  }\r\n};\r\n\r\nBasicGame.MainMenu.prototype.createLanguageGroup = function () {\r\n  var spanishOption = null;\r\n  var englishOption = null;\r\n\r\n  this.languageGroup = this.game.add.group();\r\n\r\n  spanishOption = this.addOptionTo({\r\n    msg: this.SPANISH_LANG_MSG,\r\n    textColor: 0x303c42,\r\n    textAlign: 'left',\r\n    clickCallback: this.setLanguage.bind(this, 'es'),\r\n    hSpace: 0,\r\n    vSpace: 1,\r\n    fixedWidth: 115,\r\n    group: this.languageGroup,\r\n    key: 'main_menu_background'\r\n  });\r\n\r\n  englishOption = this.addOptionTo({\r\n    msg: this.ENGLISH_LANG_MSG,\r\n    textColor: 0x303c42,\r\n    textAlign: 'left',\r\n    clickCallback: this.setLanguage.bind(this, 'en'),\r\n    hSpace: 0,\r\n    vSpace: 1,\r\n    fixedWidth: 115,\r\n    group: this.languageGroup,\r\n    key: 'main_menu_background'\r\n  });\r\n\r\n  spanishOption.textObj.anchor.set(0, 0.5);\r\n  spanishOption.textObj.x = spanishOption.buttonObj.left + 32;\r\n  englishOption.textObj.anchor.set(0, 0.5);\r\n  englishOption.textObj.x = englishOption.buttonObj.left + 32;\r\n\r\n  // add the checkbox for spanish language option\r\n  this.spanishCheckbox = this.addCheckboxFor({\r\n    referenceObj: spanishOption.buttonObj,\r\n    group: this.languageGroup,\r\n    checked: BasicGame.language === 'es'\r\n  });\r\n\r\n  // add the checkbox for english language option\r\n  this.englishCheckbox = this.addCheckboxFor({\r\n    referenceObj: englishOption.buttonObj,\r\n    group: this.languageGroup,\r\n    checked: BasicGame.language === 'en'\r\n  });\r\n\r\n  this.languageGroup.left = this.SCREEN_PADDING;\r\n  this.languageGroup.bottom = this.game.world.height - this.SCREEN_PADDING;\r\n};\r\n\r\nBasicGame.MainMenu.prototype.addOptionTo = function (prop) {\r\n  var button = null;\r\n  var text = null;\r\n  var buttonsInGroup = Math.max(0, prop.group.children.length - prop.group.children.length / 2);\r\n  var translatableObj = {};\r\n\r\n  button = this.game.add.button(\r\n    0 + ((this.BUTTON_WIDTH + this.BUTTON_HSPACING) * buttonsInGroup) * prop.hSpace,\r\n    0 + ((this.BUTTON_HEIGHT + this.BUTTON_VSPACING) * buttonsInGroup) * prop.vSpace,\r\n    prop.key || 'button_background', prop.clickCallback, this\r\n  );\r\n  button.anchor.set(1, 0);\r\n  button.width = this.BUTTON_WIDTH;\r\n  button.height = this.BUTTON_HEIGHT;\r\n\r\n  text = this.game.add.bitmapText(button.right - this.BUTTON_PADDING,\r\n    button.centerY,\r\n    this.FONT_REGULAR, prop.msg[BasicGame.language], 18);\r\n  text.anchor.set(1, 0.5);\r\n  text.align = prop.textAlign || 'right';\r\n  text.tint = prop.textColor || 0xfafafa;\r\n  text.defaultTint = text.tint;\r\n  text.linkedButton = button;\r\n  translatableObj.sourceMsg = prop.msg;\r\n  translatableObj.phaserObj = text;\r\n  if (prop.attachTextChangeCallback) {\r\n    translatableObj.onChangeCallback = (function (textObj) {\r\n      textObj.linkedButton.width = textObj.textWidth + this.BUTTON_PADDING * 2;\r\n      textObj.linkedButton.defaultWidth = textObj.textWidth + this.BUTTON_PADDING * 2;\r\n    }).bind(this, text);\r\n  }\r\n  this.translatableTexts.push(translatableObj);\r\n  this.menuButtons.push(button);\r\n\r\n  button.onInputOver.add(function (sprite, pointer, text) {\r\n    text.tint = 0xf15a4a;\r\n\r\n    if (prop.overCallback) {\r\n      prop.overCallback();\r\n    }\r\n  }, this, 0, text);\r\n\r\n  button.onInputOut.add(function (sprite, pointer, text) {\r\n    text.tint = text.defaultTint;\r\n\r\n    if (prop.outCallback) {\r\n      prop.outCallback();\r\n    }\r\n  }, this, 0, text);\r\n\r\n  button.width = text.textWidth + this.BUTTON_PADDING * 2;\r\n  button.defaultWidth = text.textWidth + this.BUTTON_PADDING * 2;\r\n\r\n  if (prop.fixedWidth) {\r\n    button.width = prop.fixedWidth;\r\n    button.defaultWidth = prop.fixedWidth;\r\n  }\r\n\r\n  if (prop.changeWidth === true) {\r\n\r\n    button.onInputOver.add(function (sprite, pointer) {\r\n      var overTween = this.game.add.tween(sprite);\r\n      overTween.to({ width: this.BUTTON_WIDTH }, 150, Phaser.Easing.Exponential.Out);\r\n      overTween.start();\r\n    }, this, 0);\r\n\r\n    button.onInputOut.add(function (sprite, pointer) {\r\n      var overTween = this.game.add.tween(sprite);\r\n      overTween.to({ width: sprite.defaultWidth }, 250, Phaser.Easing.Exponential.Out);\r\n      overTween.start();\r\n    }, this, 0);\r\n  }\r\n\r\n  prop.group.add(button);\r\n  prop.group.add(text);\r\n\r\n  return {\r\n    buttonObj: button,\r\n    textObj: text\r\n  };\r\n};\r\n\r\nBasicGame.MainMenu.prototype.addCheckboxFor = function (prop) {\r\n  var checkbox = this.game.add.image(prop.referenceObj.left, 0, 'checkbox',\r\n    (prop.checked) ? 1 : 0, prop.group);\r\n  checkbox.centerY = prop.referenceObj.centerY;\r\n  return checkbox;\r\n};\r\n\r\nBasicGame.MainMenu.prototype.showKeysDescription = function (show) {\r\n  var showTween = this.game.add.tween(this.keysDescriptionText);\r\n  showTween.to({ alpha: (show === true) ? 1 : 0 }, 200, Phaser.Easing.Exponential.Out);\r\n  showTween.start();\r\n};\r\n\r\nBasicGame.MainMenu.prototype.newGame = function () {\r\n  var levelData = null;\r\n  var skyName = null;\r\n\r\n  localStorage.removeItem('oh-my-blob');\r\n  BasicGame.reset();\r\n\r\n  this.game.load.onLoadComplete.addOnce(this.nextScene, this);\r\n  levelData = BasicGame.Helper.prototype.getLevelIdAndName(BasicGame.currentLevel);\r\n  skyName = BasicGame.Helper.prototype.getSkyName(BasicGame.currentLevel);\r\n  this.load.image(skyName, 'assets/sprites/' + skyName + '.png');\r\n  this.game.load.tilemap(levelData.id,\r\n    'assets/levels/' + levelData.name + '.json',\r\n    null,\r\n    Phaser.Tilemap.TILED_JSON);\r\n  this.game.load.start();\r\n};\r\n\r\nBasicGame.MainMenu.prototype.nextScene = function () {\r\n  this.state.start((BasicGame.currentLevel <= 30) ? 'Game' : 'TheEnd');\r\n};\r\n\r\nBasicGame.MainMenu.prototype.setLanguage = function (newLang) {\r\n  if (BasicGame.language === newLang) {\r\n    return;\r\n  }\r\n\r\n  this.spanishCheckbox.frame = 0;\r\n  this.englishCheckbox.frame = 0;\r\n\r\n  localStorage.setItem('oh-my-blob', BasicGame.setLanguage(newLang));\r\n\r\n  if (newLang === 'es') {\r\n    this.spanishCheckbox.frame = 1;\r\n  }\r\n  else {\r\n    this.englishCheckbox.frame = 1;\r\n  }\r\n\r\n  this.translatableTexts.forEach(function (element, index) {\r\n    element.phaserObj.text = element.sourceMsg[BasicGame.language];\r\n    if (element.onChangeCallback) {\r\n      element.onChangeCallback();\r\n    }\r\n  });\r\n};\r\n\r\nBasicGame.MainMenu.prototype.createCreditsGroup = function (newLang) {\r\n  var backgroundImage = null;\r\n  var englishImage = null;\r\n  var spanishImage = null;\r\n\r\n  this.creditsGroup = this.game.add.group();\r\n\r\n  backgroundImage = this.game.add.image(0, 0, 'credits_background', 0, this.creditsGroup);\r\n  backgroundImage.width = this.game.world.width;\r\n  backgroundImage.height = this.game.world.height;\r\n\r\n  englishImage = this.game.add.image(this.game.world.width / 2, 32, 'credits_es', 0, this.creditsGroup);\r\n  englishImage.anchor.set(.5, 0);\r\n\r\n  spanishImage = this.game.add.image(this.game.world.width / 2, 32, 'credits_en', 0, this.creditsGroup);\r\n  spanishImage.anchor.set(.5, 0);\r\n\r\n  this.closeButton = this.game.add.button(this.game.world.width - 32, 32,\r\n    'close', function (button, pointer, isOver) {\r\n      this.showCredits(false);\r\n    }, this, null, null, null, null, this.creditsGroup);\r\n  this.closeButton.anchor.set(1, 0);\r\n  this.closeButton.input.enabled = false;\r\n};\r\n\r\nBasicGame.MainMenu.prototype.showCredits = function (show) {\r\n  this.creditsGroup.children[1].alpha = 0;\r\n  this.creditsGroup.children[2].alpha = 0;\r\n  this.creditsGroup.alpha = 0;\r\n  this.closeButton.input.enabled = false;\r\n\r\n  if (show === true) {\r\n    if (BasicGame.language === 'es') {\r\n      this.creditsGroup.children[1].alpha = 1;\r\n    }\r\n    else {\r\n      this.creditsGroup.children[2].alpha = 1;\r\n    }\r\n\r\n    this.creditsGroup.alpha = 1;\r\n    this.closeButton.input.enabled = true;\r\n  }\r\n\r\n  this.menuButtons.forEach(function (element, index) {\r\n    element.input.enabled = !show;\r\n  });\r\n};\r\n\r\nBasicGame.MainMenu.prototype.followPointer = function () {\r\n  // afstand van middenpunt oog tot cursor\r\n  dx = this.game.input.activePointer.x - this.fakeEye.centerX;\r\n  dy = this.game.input.activePointer.y - this.fakeEye.centerY;\r\n  // stelling van pythagoras\r\n  c = Math.sqrt((dx * dx) + (dy * dy));\r\n\r\n  // afstand middelpunt tot pupil\r\n  r = this.fakeEye.radius * 0.3;\r\n\r\n  // cursor op oog\r\n  if (Math.abs(dx) < r && Math.abs(dy) < r && c < r) {\r\n    r = c;\r\n  }\r\n\r\n  // hoek bepalen\r\n  alfa = Math.asin(dy / c);\r\n\r\n  // coordinaten op rand cirkel bepalen\r\n  this.giantPupilImage.x = (Math.cos(alfa) * r) + this.fakeEye.centerX;\r\n  // 180 graden fout herstellen\r\n  if (dx < 0) {\r\n    this.giantPupilImage.x = this.fakeEye.centerX * 2 - this.giantPupilImage.x;\r\n  }\r\n  this.giantPupilImage.y = (Math.sin(alfa) * r) + this.fakeEye.centerY;\r\n};\r\n\r\nBasicGame.MainMenu.prototype.getDayString = function (newLang) {\r\n  var days = new BasicGame.Days();\r\n  if (BasicGame.currentLevel <= 30) {\r\n    return this.CONTINUE_DAY_MSG[BasicGame.language] +\r\n      ' ' + days.getDay(BasicGame.currentLevel).number;\r\n  }\r\n\r\n  return this.END_SCENE_MSG[BasicGame.language];\r\n};",
    "var BasicGame = require('BasicGame');\r\n\r\nBasicGame.Preloader = function (game) {\r\n  this.background = null;\r\n  this.preloadBar = null;\r\n  this.ready = false;\r\n};\r\n\r\nBasicGame.Preloader.prototype.preload = function () {\r\n  var i = 0;\r\n  var skyName = null;\r\n  var levelData = null;\r\n\r\n  // these are the assets we loaded in Boot.js\r\n  // a nice sparkly background and a loading progress bar\r\n  this.background = this.add.sprite(0, 0, 'preloaderBackground');\r\n  this.preloadBar = this.add.sprite(0, 0, 'preloaderBar');\r\n\r\n  // set the preloadBar sprite as a loader sprite.\r\n  // automatically crop the sprite from 0 to full-width as the\r\n  // files below are loaded in.\r\n  this.load.setPreloadSprite(this.preloadBar, 1);\r\n\r\n  //  --------------------------------------\r\n  //  ---| load the assets for the Main menu\r\n  this.load.image('main_menu_background', 'assets/sprites/main_menu_background.png');\r\n  this.load.image('button_background', 'assets/sprites/button_background.png');\r\n  this.load.image('giant_pupil', 'assets/sprites/giant_pupil.png');\r\n  this.load.image('close', 'assets/sprites/close.png');\r\n  this.load.image('credits_background', 'assets/sprites/credits_background.png');\r\n  this.load.image('credits_en', 'assets/sprites/credits_en.png');\r\n  this.load.image('credits_es', 'assets/sprites/credits_es.png');\r\n\r\n  this.load.audio('splash_music', 'assets/audio/music/splash_music.ogg', true);\r\n\r\n  //  ---------------------------------\r\n  //  ---| load the assets for the Game\r\n  this.load.image('pupil', 'assets/sprites/pupil_normal.png');\r\n  this.load.image('light', 'assets/sprites/light.png');\r\n  this.load.image('view_zone', 'assets/sprites/view_zone.png');\r\n  this.load.image('piece', 'assets/sprites/piece.png');\r\n  this.load.image('platform', 'assets/sprites/platform.png');\r\n  this.load.image('life', 'assets/sprites/life.png');\r\n  this.load.image('dialogue_background', 'assets/sprites/dialogue_background.png');\r\n  this.load.image('dialogue_mark', 'assets/sprites/dialogue_mark.png');\r\n  this.load.image('noise', 'assets/sprites/noise.png');\r\n  this.load.image('chat', 'assets/sprites/chat.png');\r\n  this.load.image('pause_es', 'assets/sprites/pause_es.png');\r\n  this.load.image('pause_en', 'assets/sprites/pause_en.png');\r\n\r\n  // this.load.spritesheet('noise', 'assets/sprites/noise.png', 1024, 640);\r\n  this.load.spritesheet('player', 'assets/sprites/player.png', 32, 32, 1);\r\n  this.load.spritesheet('eye', 'assets/sprites/eye.png', 222, 118, 4);\r\n  this.load.spritesheet('checkbox', 'assets/sprites/checkbox.png', 24, 24, 2);\r\n  this.load.spritesheet('mute', 'assets/sprites/mute.png', 24, 24, 2);\r\n  this.load.spritesheet('pause', 'assets/sprites/pause.png', 24, 24, 2);\r\n\r\n  this.load.audio('jump', 'assets/audio/sfx/jump.ogg', true);\r\n  this.load.audio('walk', 'assets/audio/sfx/walk.ogg', true);\r\n  this.load.audio('slide', 'assets/audio/sfx/slide.ogg', true);\r\n  this.load.audio('fall', 'assets/audio/sfx/fall.ogg', true);\r\n  this.load.audio('death', 'assets/audio/sfx/death.ogg', true);\r\n  this.load.audio('ray', 'assets/audio/sfx/ray.ogg', true);\r\n  this.load.audio('eye', 'assets/audio/sfx/eye.ogg', true);\r\n  this.load.audio('eye-anger', 'assets/audio/sfx/anger.ogg', true);\r\n  this.load.audio('level_music', 'assets/audio/music/levels_music.ogg', true);\r\n  this.load.audio('piece', 'assets/audio/sfx/piece01.ogg', true);\r\n\r\n  this.load.bitmapFont('font', 'assets/fonts/FiraCode_0.png',\r\n    'assets/fonts/FiraCode.fnt', null);\r\n  this.load.bitmapFont('font-medium', 'assets/fonts/FiraCodeMedium_0.png',\r\n    'assets/fonts/FiraCodeMedium.fnt', null);\r\n\r\n  // it will not be necessary to load this one if the player already passed the\r\n  // first part of the game\r\n  skyName = BasicGame.Helper.prototype.getSkyName(BasicGame.currentLevel);\r\n  this.load.image(skyName, 'assets/sprites/' + skyName + '.png');\r\n\r\n  // load this if the current level stored requires it, otherwise load it\r\n  // when the player is near the end of the corresponding chapter\r\n  this.load.spritesheet('spike-platform', 'assets/sprites/spike-platform.png', 32, 32);\r\n  this.load.image('spike', 'assets/sprites/spike.png');\r\n  this.load.image('spike-r', 'assets/sprites/spike-r.png');\r\n  this.load.image('spike-l', 'assets/sprites/spike-l.png');\r\n  this.load.image('spike-d', 'assets/sprites/spike-d.png');\r\n  this.load.audio('spike', 'assets/audio/sfx/spike.ogg', true);\r\n\r\n  levelData = BasicGame.Helper.prototype.getLevelIdAndName(BasicGame.currentLevel);\r\n  this.game.load.tilemap(levelData.id,\r\n    'assets/levels/' + levelData.name + '.json',\r\n    null,\r\n    Phaser.Tilemap.TILED_JSON);\r\n};\r\n\r\nBasicGame.Preloader.prototype.create = function () {\r\n  // Once the load has finished we disable the crop because we're going to sit in\r\n  // the update loop for a short while as the music decodes\r\n  this.preloadBar.cropEnabled = false;\r\n};\r\n\r\nBasicGame.Preloader.prototype.update = function () {\r\n  if (this.ready === false) {\r\n    this.ready = true;\r\n    this.state.start('MainMenu');\r\n  }\r\n};\r\n",
    "var BasicGame = require('BasicGame');\r\n\r\nBasicGame.TheEnd = function (game) {\r\n  // constants\r\n  this.PANELS_SPACING = 16;\r\n  this.FADEIN_DELAY = 800;\r\n  this.NEXT_PANEL_DELAY = 1500;\r\n  this.KEY_NEXT1 = Phaser.Keyboard.D;\r\n  this.KEY_NEXT2 = Phaser.Keyboard.RIGHT;\r\n  this.FONT_REGULAR = 'font';\r\n  this.FONT_MEDIUM = 'font-medium';\r\n  this.FOOTER_MSG = {\r\n    'es': 'Hace un par de horas\\nPasada la media noche',\r\n    'en': 'A couple of hours ago\\nPast midnight'\r\n  };\r\n  this.NEXT_MSG = {\r\n    'es': 'siguiente',\r\n    'en': 'next'\r\n  };\r\n  this.MAINMENU_MSG = {\r\n    'es': 'ir al menú principal',\r\n    'en': 'go to main menu'\r\n  };\r\n  this.PANELS_KEYS = [\r\n    'end_scene_p1v1',\r\n    'end_scene_p1v2',\r\n    'end_scene_p1v3',\r\n    'end_scene_p2v1',\r\n    'end_scene_p2v2',\r\n    'end_scene_p2v3'\r\n  ];\r\n  this.THANKS_MSG = {\r\n    'es': 'gracias por jugar',\r\n    'en': 'thanks for playing'\r\n  };\r\n\r\n  // destroyable objects (sprites, sounds, groups, tweens...)\r\n  this.background = null;\r\n  this.panelsGroup = null;\r\n  this.buttonGroup = null;\r\n  this.footerText = null;\r\n  this.music = null;\r\n  this.thanksText = null;\r\n\r\n  // global properties\r\n  this.currentPanelIndex = 0;\r\n  this.nextClicked = false;\r\n};\r\n\r\n// ╔══════════════════════════════════════════════════════════════════════════╗\r\n// ║ PHASER STATE METHODS                                                     ║\r\nBasicGame.TheEnd.prototype.preload = function () {\r\n  if (BasicGame.language === 'es') {\r\n    this.load.image(this.PANELS_KEYS[0], 'assets/sprites/end_es_1-1.png');\r\n    this.load.image(this.PANELS_KEYS[1], 'assets/sprites/end_es_1-2.png');\r\n    this.load.image(this.PANELS_KEYS[2], 'assets/sprites/end_es_1-3.png');\r\n    this.load.image(this.PANELS_KEYS[3], 'assets/sprites/end_es_2-1.png');\r\n    this.load.image(this.PANELS_KEYS[4], 'assets/sprites/end_es_2-2.png');\r\n    this.load.image(this.PANELS_KEYS[5], 'assets/sprites/end_es_2-3.png');\r\n  }\r\n  else if (BasicGame.language === 'en') {\r\n    this.load.image(this.PANELS_KEYS[0], 'assets/sprites/end_en_1-1.png');\r\n    this.load.image(this.PANELS_KEYS[1], 'assets/sprites/end_en_1-2.png');\r\n    this.load.image(this.PANELS_KEYS[2], 'assets/sprites/end_en_1-3.png');\r\n    this.load.image(this.PANELS_KEYS[3], 'assets/sprites/end_en_2-1.png');\r\n    this.load.image(this.PANELS_KEYS[4], 'assets/sprites/end_en_2-2.png');\r\n    this.load.image(this.PANELS_KEYS[5], 'assets/sprites/end_en_2-3.png');\r\n  }\r\n\r\n  this.load.audio('exit_music', 'assets/audio/music/the_end.ogg', true);\r\n};\r\n\r\nBasicGame.TheEnd.prototype.create = function () {\r\n  var index = 0;\r\n  var panelImage = null;\r\n  var panelCounter = 0;\r\n  var nextButton = null;\r\n  var nextText = null;\r\n\r\n  this.nextClicked = false;\r\n\r\n  // set the background for the scene\r\n  this.background = this.game.add.image(0, 0, 'credits_background');\r\n  this.background.width = this.game.world.width;\r\n  this.background.height = this.game.world.height;\r\n\r\n  // add the footer message\r\n  this.footerText = this.game.add.bitmapText(this.game.world.width - 16,\r\n    this.game.world.height - 16,\r\n    this.FONT_MEDIUM, this.FOOTER_MSG[BasicGame.language], 24);\r\n  this.footerText.anchor.set(1, 1);\r\n  this.footerText.align = 'right';\r\n\r\n  // add the panels group\r\n  this.panelsGroup = this.game.add.group();\r\n  for (index = 0; index < this.PANELS_KEYS.length; index++) {\r\n    panelImage = this.game.add.image(0, 0, this.PANELS_KEYS[index], 0, this.panelsGroup);\r\n    panelImage.x = panelCounter * (panelCounter > 0 ? panelImage.width + this.PANELS_SPACING : 0);\r\n    panelImage.alpha = 0;\r\n\r\n    if (++panelCounter > 2) {\r\n      panelCounter = 0;\r\n    }\r\n  }\r\n  this.panelsGroup.x = 16;\r\n  this.panelsGroup.y = 16;\r\n\r\n  // add the next group\r\n  this.createButton({\r\n    buttonText: this.NEXT_MSG[BasicGame.language],\r\n    clickCallback: function () {\r\n      this.buttonGroup.destroy();\r\n      this.nextClicked = true;\r\n      this.showPanel();\r\n    }\r\n  });\r\n  this.buttonGroup.children[0].input.enabled = false;\r\n  this.buttonGroup.alpha = 0;\r\n\r\n  // play the music\r\n  this.music = this.game.add.sound('exit_music', 0.1, true);\r\n  this.music.play();\r\n\r\n  // init the animations for the first page\r\n  this.currentPanelIndex = 0;\r\n  this.showPanel();\r\n};\r\n\r\nBasicGame.TheEnd.prototype.update = function () {\r\n\r\n};\r\n\r\n/**\r\n * This method will be called when the State is shutdown (i.e. you switch to another state from this one).\r\n */\r\nBasicGame.TheEnd.prototype.shutdown = function () {\r\n  this.background.destroy();\r\n  this.panelsGroup.destroy();\r\n  this.buttonGroup.destroy();\r\n  this.footerText.destroy();\r\n  this.music.destroy();\r\n  this.thanksText.destroy();\r\n};\r\n// ║                                                                           ║\r\n// ╚═══════════════════════════════════════════════════════════════════════════╝\r\nBasicGame.TheEnd.prototype.showPanel = function () {\r\n  var fadeTween = null;\r\n\r\n  if (this.currentPanelIndex > 2) {\r\n    if (this.currentPanelIndex > 5) {\r\n      // show another next button\r\n      this.createButton({\r\n        buttonText: this.NEXT_MSG[BasicGame.language],\r\n        clickCallback: function () {\r\n          this.buttonGroup.destroy();\r\n          this.showThanks();\r\n        }\r\n      });\r\n      return;\r\n    }\r\n    else if (this.buttonGroup.alpha === 0 && !this.nextClicked) {\r\n      // show next button\r\n      this.buttonGroup.children[0].input.enabled = true;\r\n      this.buttonGroup.alpha = 1;\r\n      return;\r\n    }\r\n  }\r\n\r\n  fadeTween = this.game.add.tween(this.panelsGroup.children[this.currentPanelIndex++]);\r\n  fadeTween.to({ alpha: 1 }, this.FADEIN_DELAY, Phaser.Easing.Quadratic.Out, false);\r\n  fadeTween.onComplete.addOnce(function () {\r\n    this.game.time.create(this.game, true)\r\n      .add(this.NEXT_PANEL_DELAY, this.showPanel, this)\r\n      .timer.start(100);\r\n  }, this);\r\n  fadeTween.start();\r\n};\r\n\r\nBasicGame.TheEnd.prototype.createButton = function (prop) {\r\n  this.buttonGroup = this.game.add.group();\r\n\r\n  nextButton = this.game.add.button(this.game.world.width / 2,\r\n    this.footerText.centerY, 'button_background', prop.clickCallback, this);\r\n  nextButton.anchor.set(.5, .5);\r\n\r\n  nextText = this.game.add.bitmapText(nextButton.x, nextButton.y,\r\n    this.FONT_REGULAR, prop.buttonText, 18);\r\n  nextText.anchor.set(.5, .5);\r\n\r\n  nextButton.width = nextText.textWidth + 32;\r\n  nextButton.height = nextText.textHeight + 16;\r\n\r\n  this.buttonGroup.addChild(nextButton);\r\n  this.buttonGroup.addChild(nextText);\r\n};\r\n\r\nBasicGame.TheEnd.prototype.showThanks = function () {\r\n  this.footerText.alpha = 0;\r\n  this.panelsGroup.alpha = 0;\r\n\r\n  this.thanksText = this.game.add.bitmapText(this.game.world.width / 2,\r\n    this.game.world.height / 2,\r\n    this.FONT_MEDIUM, this.THANKS_MSG[BasicGame.language], 32);\r\n  this.thanksText.anchor.set(.5, .5);\r\n\r\n  // show main menu button\r\n  this.createButton({\r\n    buttonText: this.MAINMENU_MSG[BasicGame.language],\r\n    clickCallback: function () {\r\n      this.state.start('MainMenu');\r\n    }\r\n  });\r\n};"
  ]
}